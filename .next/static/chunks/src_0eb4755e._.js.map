{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/incidents-service.ts"],"sourcesContent":["'use server';\n\nimport { db } from '@/lib/firebase';\nimport { collection, addDoc, getDocs, serverTimestamp, Timestamp, doc, updateDoc, increment, getDoc, query, orderBy } from \"firebase/firestore\";\nimport { Incident, Comment } from '@/lib/types';\n\nexport interface IncidentData {\n    location: {\n        latitude: number;\n        longitude: number;\n    };\n    category: string;\n    severity: string;\n    summary: string;\n    address?: string;\n}\n\nexport async function saveIncidentReport(incidentData: IncidentData) {\n    try {\n        const docRef = await addDoc(collection(db, \"incidents\"), {\n            location: incidentData.location,\n            category: incidentData.category,\n            severity: incidentData.severity,\n            summary: incidentData.summary,\n            address: incidentData.address || null,\n            upvotes: 0,\n            timestamp: serverTimestamp(),\n        });\n        console.log(\"Document written with ID: \", docRef.id);\n        return { success: true, id: docRef.id };\n    } catch (e) {\n        console.error(\"Error adding document: \", e);\n        if (e instanceof Error) {\n            if (e.message.includes('PERMISSION_DENIED')) {\n                 return { success: false, error: 'Permission Denied. Please check your Firestore security rules in the Firebase Console. This is a common issue and is required for the app to save data.' };\n            }\n            return { success: false, error: e.message };\n        }\n        return { success: false, error: 'An unknown error occurred while saving the incident report.' };\n    }\n}\n\nexport async function getIncidents() {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'incidents'));\n    const incidents: Incident[] = querySnapshot.docs.map(doc => {\n      const data = doc.data();\n      const timestamp = data.timestamp as Timestamp;\n      \n      return {\n        id: doc.id,\n        location: {\n          latitude: data.location.latitude,\n          longitude: data.location.longitude,\n        },\n        category: data.category,\n        severity: data.severity,\n        summary: data.summary,\n        timestamp: timestamp.toDate().toISOString(),\n        address: data.address || undefined,\n        upvotes: data.upvotes || 0,\n      };\n    });\n    return { success: true, data: incidents };\n  } catch (e) {\n    console.error(\"Error getting documents: \", e);\n    if (e instanceof Error) {\n      if (e.message.includes('PERMISSION_DENIED')) {\n        return { success: false, error: 'Permission Denied. Could not retrieve incidents. Please check your Firestore security rules.' };\n      }\n      return { success: false, error: e.message };\n    }\n    return { success: false, error: 'An unknown error occurred while fetching incidents.' };\n  }\n}\n\nexport async function upvoteIncident(incidentId: string) {\n    try {\n        const incidentRef = doc(db, 'incidents', incidentId);\n        await updateDoc(incidentRef, {\n            upvotes: increment(1)\n        });\n        const updatedDoc = await getDoc(incidentRef);\n        if(updatedDoc.exists()){\n            return { success: true, newUpvotes: updatedDoc.data().upvotes };\n        }\n        return { success: false, error: 'Could not retrieve updated upvote count.' };\n    } catch (e: any) {\n        console.error(\"Error upvoting incident: \", e);\n        return { success: false, error: e.message || 'An unknown error occurred while upvoting.' };\n    }\n}\n\nexport async function addComment(incidentId: string, commentText: string) {\n    try {\n        const commentsCollectionRef = collection(db, 'incidents', incidentId, 'comments');\n        const docRef = await addDoc(commentsCollectionRef, {\n            text: commentText,\n            author: 'Anonymous', // In a real app, this would be the logged-in user's ID/name\n            timestamp: serverTimestamp(),\n        });\n        return { success: true, id: docRef.id };\n    } catch (e: any) {\n        console.error(\"Error adding comment: \", e);\n        return { success: false, error: e.message || 'An unknown error occurred while adding the comment.' };\n    }\n}\n\nexport async function getComments(incidentId: string): Promise<{ success: boolean; data?: Comment[], error?: string }> {\n    try {\n        const commentsCollectionRef = collection(db, 'incidents', incidentId, 'comments');\n        const q = query(commentsCollectionRef, orderBy('timestamp', 'desc'));\n        const querySnapshot = await getDocs(q);\n        const comments: Comment[] = querySnapshot.docs.map(doc => {\n            const data = doc.data();\n            const timestamp = data.timestamp as Timestamp;\n            return {\n                id: doc.id,\n                text: data.text,\n                author: data.author,\n                timestamp: timestamp ? timestamp.toDate().toISOString() : new Date().toISOString(),\n            };\n        });\n        return { success: true, data: comments };\n    } catch (e: any) {\n        console.error(\"Error fetching comments: \", e);\n        return { success: false, error: e.message || 'An unknown error occurred while fetching comments.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;IA0CsB,eAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/chart.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 461, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/summarize-trends-flow.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview A flow to analyze a list of incidents and identify trends.\n *\n * - summarizeTrends - A function that handles the trend analysis process.\n * - SummarizeTrendsInput - The input type for the summarizeTrends function.\n * - SummarizeTrendsOutput - The return type for the summarizeTrends function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { Incident } from '@/lib/types';\n\nconst IncidentSchema = z.object({\n  id: z.string(),\n  location: z.object({\n    latitude: z.number(),\n    longitude: z.number(),\n  }),\n  category: z.string(),\n  severity: z.string(),\n  summary: z.string(),\n  timestamp: z.string(),\n  address: z.string().optional(),\n  upvotes: z.number().optional(),\n});\n\nconst SummarizeTrendsInputSchema = z.object({\n    incidents: z.array(IncidentSchema).describe('A list of all incidents to analyze for trends.'),\n});\nexport type SummarizeTrendsInput = z.infer<typeof SummarizeTrendsInputSchema>;\n\nconst SummarizeTrendsOutputSchema = z.object({\n  trendSummary: z.string().describe('A 2-3 sentence summary of the most important trends found in the data.'),\n  keyObservations: z.array(z.string()).describe('A list of 3-5 bullet points highlighting key observations, such as incident hotspots, recurring issues, or changes over time.'),\n});\nexport type SummarizeTrendsOutput = z.infer<typeof SummarizeTrendsOutputSchema>;\n\nexport async function summarizeTrends(input: SummarizeTrendsInput): Promise<SummarizeTrendsOutput> {\n  return summarizeTrendsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'summarizeTrendsPrompt',\n  input: { schema: SummarizeTrendsInputSchema },\n  output: { schema: SummarizeTrendsOutputSchema },\n  prompt: `You are a public safety data analyst. Your task is to analyze a dataset of incident reports and provide a high-level summary of trends and key observations. The dataset contains incidents with categories, severities, locations, and timestamps.\n\n**Analysis Tasks:**\n\n1.  **Identify Hotspots:** Look for concentrations of incidents. Are there specific addresses or areas where incidents frequently occur?\n2.  **Analyze by Category:** What are the most common types of incidents? Are there any unusual patterns?\n3.  **Analyze by Time:** Are there specific days of the week or times of day when incidents are more common? (Note: The timestamp is an ISO string).\n4.  **Synthesize Findings:** Based on your analysis, generate a concise trend summary and a list of key observations.\n\n**Example Output:**\n-   **Trend Summary:** \"Analysis of recent incident data reveals a significant concentration of road accidents along Main Street, particularly during evening rush hour. We've also noted a recurring pattern of electrical issues in the downtown district, suggesting a potential infrastructure problem.\"\n-   **Key Observations:**\n    *   \"Over 50% of all reported accidents occurred on Main Street.\"\n    *   \"Water logging incidents are most common on weekends, likely due to stadium traffic.\"\n    *   \"The neighborhood of Oak Park has a high density of 'Fallen Tree' reports, indicating a need for city maintenance.\"\n\n**Data to Analyze:**\nTotal Incidents: {{incidents.length}}\n\n{{#each incidents}}\n- Category: {{category}}\n  - Severity: {{severity}}\n  - Timestamp: {{timestamp}}\n  {{#if address}}\n  - Address: {{address}}\n  {{/if}}\n{{/each}}\n\nProvide your analysis in the requested structured format. Do not include markdown formatting in your response.\n`,\n});\n\nconst summarizeTrendsFlow = ai.defineFlow(\n  {\n    name: 'summarizeTrendsFlow',\n    inputSchema: SummarizeTrendsInputSchema,\n    outputSchema: SummarizeTrendsOutputSchema,\n  },\n  async (input) => {\n    if (input.incidents.length < 5) {\n        return {\n            trendSummary: \"Not enough data to perform a meaningful trend analysis. More incidents need to be reported to identify patterns.\",\n            keyObservations: [\"At least 5 incidents are required for trend analysis.\"],\n        }\n    }\n    const { output } = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;;IAwCsB,kBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 477, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/analytics/page.tsx"],"sourcesContent":["\n'use client';\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { getIncidents } from '@/lib/incidents-service';\nimport { Incident } from '@/lib/types';\nimport { useToast } from '@/hooks/use-toast';\nimport { LoaderCircle, AlertTriangle, BarChart2, PieChart, Sparkles, CheckSquare, List } from 'lucide-react';\nimport { Bar, BarChart, CartesianGrid, Legend, Pie, Cell, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltipContent } from '@/components/ui/chart';\nimport { summarizeTrends, SummarizeTrendsOutput } from '@/ai/flows/summarize-trends-flow';\nimport { format, parseISO } from 'date-fns';\n\nconst COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\", \"#AF19FF\", \"#FF4560\"];\n\nexport default function AnalyticsPage() {\n  const [incidents, setIncidents] = useState<Incident[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysis, setAnalysis] = useState<SummarizeTrendsOutput | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const fetchIncidents = async () => {\n      setIsLoading(true);\n      const result = await getIncidents();\n      if (result.success && result.data) {\n        setIncidents(result.data);\n      } else {\n        toast({\n          variant: 'destructive',\n          title: 'Failed to load incidents',\n          description: result.error || 'Could not fetch incidents from the server.',\n        });\n      }\n      setIsLoading(false);\n    };\n    fetchIncidents();\n  }, [toast]);\n  \n  useEffect(() => {\n      if(incidents.length > 0){\n          const runAnalysis = async () => {\n              setIsAnalyzing(true);\n              try {\n                  const result = await summarizeTrends({ incidents });\n                  setAnalysis(result);\n              } catch (e: any) {\n                  toast({ variant: 'destructive', title: 'Trend analysis failed', description: e.message });\n              } finally {\n                  setIsAnalyzing(false);\n              }\n          }\n          runAnalysis();\n      }\n  }, [incidents, toast]);\n\n  const incidentsByCategory = useMemo(() => {\n    const counts = incidents.reduce((acc, incident) => {\n      acc[incident.category] = (acc[incident.category] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n    return Object.entries(counts).map(([name, value]) => ({ name, value })).sort((a,b) => b.value - a.value);\n  }, [incidents]);\n\n  const incidentsByDay = useMemo(() => {\n    const counts = incidents.reduce((acc, incident) => {\n        const day = format(parseISO(incident.timestamp), 'eeee');\n        acc[day] = (acc[day] || 0) + 1;\n        return acc;\n    }, {} as Record<string, number>);\n    \n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    return daysOfWeek.map(day => ({ name: day, incidents: counts[day] || 0 }));\n  }, [incidents]);\n\n  const chartConfigCategory: ChartConfig = useMemo(() => {\n      const config: ChartConfig = {};\n      incidentsByCategory.forEach(item => {\n          config[item.name] = { label: item.name };\n      });\n      return config;\n  }, [incidentsByCategory]);\n  \n  const chartConfigDays: ChartConfig = {\n      incidents: { label: \"Incidents\", color: \"hsl(var(--primary))\" },\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-[calc(100vh-8rem)]\">\n        <LoaderCircle className=\"w-8 h-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-background min-h-screen\">\n      <main className=\"container mx-auto px-4 py-8 md:py-16\">\n        <header className=\"text-center mb-12\">\n          <h1 className=\"text-4xl sm:text-5xl font-bold font-headline text-primary\">Incident Analytics</h1>\n          <p className=\"mt-4 text-lg text-muted-foreground\">\n            Visualizing trends and patterns in reported data.\n          </p>\n        </header>\n        \n        {isAnalyzing || analysis ? (\n            <Card className=\"mb-8 shadow-lg animate-in fade-in-50\">\n                <CardHeader>\n                <CardTitle className=\"font-headline text-2xl flex items-center gap-2\">\n                    <Sparkles className=\"w-6 h-6 text-primary\" />\n                    AI Trend Analysis\n                </CardTitle>\n                </CardHeader>\n                <CardContent className='space-y-6'>\n                    {isAnalyzing ? (\n                        <div className=\"flex items-center gap-3 text-muted-foreground\">\n                            <LoaderCircle className='w-5 h-5 animate-spin' />\n                            <p>Analyzing data to find trends...</p>\n                        </div>\n                    ) : analysis ? (\n                        <>\n                            <p className=\"text-muted-foreground leading-relaxed\">{analysis.trendSummary}</p>\n                            <div>\n                                <h3 className='font-semibold text-lg flex items-center gap-2 mb-2'><List className='w-5 h-5' /> Key Observations</h3>\n                                <ul className=\"space-y-2 list-disc pl-5\">\n                                    {analysis.keyObservations.map((item, index) => (\n                                    <li key={index} className=\"text-sm text-muted-foreground flex items-start gap-2\">\n                                        <CheckSquare className='w-4 h-4 mt-1 shrink-0 text-primary/70' />\n                                        <span>{item}</span>\n                                    </li>\n                                    ))}\n                                </ul>\n                            </div>\n                        </>\n                    ) : null}\n                </CardContent>\n            </Card>\n        ) : null}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className='flex items-center gap-2'><PieChart className='w-5 h-5' />Incidents by Category</CardTitle>\n              <CardDescription>Distribution of all reported incident types.</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ChartContainer config={chartConfigCategory} className=\"mx-auto aspect-square max-h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <PieChart>\n                        <Tooltip content={<ChartTooltipContent nameKey=\"name\" hideLabel />} />\n                        <Pie data={incidentsByCategory} dataKey=\"value\" nameKey=\"name\" cx=\"50%\" cy=\"50%\" outerRadius={100} label>\n                             {incidentsByCategory.map((entry, index) => (\n                                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                            ))}\n                        </Pie>\n                         <Legend />\n                    </PieChart>\n                </ResponsiveContainer>\n              </ChartContainer>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader>\n              <CardTitle className='flex items-center gap-2'><BarChart2 className='w-5 h-5' />Incidents by Day of Week</CardTitle>\n              <CardDescription>Total number of incidents reported each day.</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ChartContainer config={chartConfigDays} className=\"mx-auto aspect-video max-h-[300px]\">\n                 <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={incidentsByDay}>\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey=\"name\" tickLine={false} tickMargin={10} axisLine={false} />\n                        <YAxis />\n                        <Tooltip content={<ChartTooltipContent hideIndicator />} />\n                        <Bar dataKey=\"incidents\" fill=\"var(--color-incidents)\" radius={4} />\n                    </BarChart>\n                 </ResponsiveContainer>\n              </ChartContainer>\n            </CardContent>\n          </Card>\n        </div>\n        {incidents.length === 0 && !isLoading && (\n            <Card className=\"mt-8\">\n                <CardContent className=\"p-8 text-center\">\n                    <AlertTriangle className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                    <h3 className=\"text-xl font-semibold\">No Data Available</h3>\n                    <p className=\"text-muted-foreground mt-2\">There is no incident data to analyze yet. Please report an incident to get started.</p>\n                </CardContent>\n            </Card>\n        )}\n      </main>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}