{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/custom-map-pin.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { LucideProps } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface CustomMapPinProps {\n  icon: React.ElementType<LucideProps>;\n  className?: string;\n}\n\nexport function CustomMapPin({ icon: Icon, className }: CustomMapPinProps) {\n  return (\n    <div\n      className={cn(\n        'w-8 h-8 rounded-full bg-background border-2 border-foreground flex items-center justify-center shadow-md',\n        className\n      )}\n    >\n      <Icon className={cn('w-5 h-5 text-foreground', className)} />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAIA;AAJA;;;AAWO,SAAS,aAAa,EAAE,MAAM,IAAI,EAAE,SAAS,EAAqB;IACvE,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4GACA;kBAGF,cAAA,6LAAC;YAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,2BAA2B;;;;;;;;;;;AAGrD;KAXgB","debugId":null}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/map.tsx"],"sourcesContent":["\n'use client';\n\nimport React, { useMemo } from 'react';\nimport { GoogleMap, useJsApiLoader, OverlayView, TrafficLayer, Polyline } from '@react-google-maps/api';\nimport { CustomMapPin } from './custom-map-pin';\nimport { Droplets, Car, PowerOff, AlertTriangle, Construction, TreeDeciduous, TrafficCone, Home, School } from 'lucide-react';\nimport { Incident } from '@/lib/types';\n\nconst defaultContainerStyle = {\n  width: '100%',\n  height: '100%',\n  borderRadius: '0.5rem',\n};\n\nconst defaultCenter = {\n  lat: 37.7749,\n  lng: -122.4194,\n};\n\nconst getPixelPositionOffset = (width: number, height: number) => ({\n  x: -(width / 2),\n  y: -(height / 2),\n});\n\nconst categoryStyles: { [key: string]: { icon: React.ElementType; className: string } } = {\n    'Water Logging': { icon: Droplets, className: 'bg-blue-100 border-blue-500 text-blue-500' },\n    'Road Accidents': { icon: Car, className: 'bg-red-100 border-red-500 text-red-500' },\n    'Accident': { icon: Car, className: 'bg-red-100 border-red-500 text-red-500' },\n    'Fire Accidents': { icon: TrafficCone, className: 'bg-orange-100 border-orange-500 text-orange-500' },\n    'Electrical Issues': { icon: PowerOff, className: 'bg-yellow-100 border-yellow-500 text-yellow-500' },\n    'PowerCut': { icon: PowerOff, className: 'bg-yellow-100 border-yellow-500 text-yellow-500' },\n    'Drainage/Fallen Tree': { icon: TreeDeciduous, className: 'bg-green-100 border-green-500 text-green-500' },\n    'Road Blockages': { icon: TrafficCone, className: 'bg-gray-100 border-gray-500 text-gray-500' },\n    'Construction Zones': { icon: Construction, className: 'bg-indigo-100 border-indigo-500 text-indigo-500' },\n    'Home': { icon: Home, className: 'bg-green-100 border-green-500 text-green-500' },\n    'School': { icon: School, className: 'bg-blue-100 border-blue-500 text-blue-500' },\n    'Other': { icon: AlertTriangle, className: 'bg-purple-100 border-purple-500 text-purple-500' },\n};\n\ninterface MapComponentProps {\n  incidents: Incident[];\n  onPinClick: (incident: Incident) => void;\n  onMapClick?: (e: google.maps.MapMouseEvent) => void;\n  center?: { lat: number; lng: number };\n  zoom?: number;\n  containerStyle?: React.CSSProperties;\n  showTraffic?: boolean;\n  routePolyline?: string;\n}\n\nexport function MapComponent({ \n  incidents,\n  onPinClick,\n  onMapClick,\n  center = defaultCenter,\n  zoom = 12,\n  containerStyle = defaultContainerStyle,\n  showTraffic = false,\n  routePolyline\n}: MapComponentProps) {\n  const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\n\n  const { isLoaded, loadError } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: apiKey || '',\n    libraries: ['places', 'routes', 'geometry'],\n  });\n  \n  const decodedPath = useMemo(() => {\n    if (isLoaded && routePolyline && window.google?.maps?.geometry?.encoding) {\n        return window.google.maps.geometry.encoding.decodePath(routePolyline);\n    }\n    return [];\n  }, [isLoaded, routePolyline]);\n\n  if (loadError) {\n    return (\n      <div className=\"flex items-center justify-center h-full bg-muted rounded-lg\">\n        <p className=\"text-destructive\">\n          Error loading maps.\n        </p>\n      </div>\n    );\n  }\n\n  if (!isLoaded) {\n    return (\n       <div className=\"flex items-center justify-center h-full bg-muted rounded-lg\">\n        <p>Loading Map...</p>\n      </div>\n    );\n  }\n\n  if (!apiKey) {\n    return (\n      <div className=\"flex items-center justify-center h-full bg-muted rounded-lg\">\n        <p className=\"text-destructive\">\n          Google Maps API key is missing. Please add it to your .env file.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={zoom} onClick={onMapClick}>\n      {incidents.map(incident => {\n          const style = categoryStyles[incident.category] || categoryStyles['Other'];\n          if (!style) return null;\n          return (\n            <OverlayView\n              key={incident.id}\n              position={{ lat: incident.location.latitude, lng: incident.location.longitude }}\n              mapPaneName={OverlayView.OVERLAY_MOUSE_TARGET}\n              getPixelPositionOffset={getPixelPositionOffset}\n            >\n              <div onClick={() => onPinClick(incident)} style={{cursor: 'pointer'}}>\n                <CustomMapPin icon={style.icon} className={style.className} />\n              </div>\n            </OverlayView>\n          )\n      })}\n      {showTraffic && <TrafficLayer autoUpdate />}\n      {decodedPath.length > 0 && (\n        <Polyline\n            path={decodedPath}\n            options={{\n                strokeColor: '#FF0000',\n                strokeOpacity: 0.8,\n                strokeWeight: 4,\n            }}\n        />\n      )}\n    </GoogleMap>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 375, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/incidents-service.ts"],"sourcesContent":["'use server';\n\nimport { db } from '@/lib/firebase';\nimport { collection, addDoc, getDocs, serverTimestamp, Timestamp } from \"firebase/firestore\";\nimport { Incident } from '@/lib/types';\n\nexport interface IncidentData {\n    location: {\n        latitude: number;\n        longitude: number;\n    };\n    category: string;\n    severity: string;\n    summary: string;\n}\n\nexport async function saveIncidentReport(incidentData: IncidentData) {\n    try {\n        const docRef = await addDoc(collection(db, \"incidents\"), {\n            location: incidentData.location,\n            category: incidentData.category,\n            severity: incidentData.severity,\n            summary: incidentData.summary,\n            timestamp: serverTimestamp(),\n        });\n        console.log(\"Document written with ID: \", docRef.id);\n        return { success: true, id: docRef.id };\n    } catch (e) {\n        console.error(\"Error adding document: \", e);\n        if (e instanceof Error) {\n            if (e.message.includes('PERMISSION_DENIED')) {\n                 return { success: false, error: 'Permission Denied. Please check your Firestore security rules in the Firebase Console. This is a common issue and is required for the app to save data.' };\n            }\n            return { success: false, error: e.message };\n        }\n        return { success: false, error: 'An unknown error occurred while saving the incident report.' };\n    }\n}\n\nexport async function getIncidents() {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'incidents'));\n    const incidents: Incident[] = querySnapshot.docs.map(doc => {\n      const data = doc.data();\n      const timestamp = data.timestamp as Timestamp;\n      \n      return {\n        id: doc.id,\n        location: {\n          latitude: data.location.latitude,\n          longitude: data.location.longitude,\n        },\n        category: data.category,\n        severity: data.severity,\n        summary: data.summary,\n        timestamp: timestamp.toDate().toISOString(),\n      };\n    });\n    return { success: true, data: incidents };\n  } catch (e) {\n    console.error(\"Error getting documents: \", e);\n    if (e instanceof Error) {\n      if (e.message.includes('PERMISSION_DENIED')) {\n        return { success: false, error: 'Permission Denied. Could not retrieve incidents. Please check your Firestore security rules.' };\n      }\n      return { success: false, error: e.message };\n    }\n    return { success: false, error: 'An unknown error occurred while fetching incidents.' };\n  }\n}\n"],"names":[],"mappings":";;;;;;IAuCsB,eAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 391, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/predictive-analysis-flow.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview A flow to analyze nearby incidents and predict consequences.\n *\n * - predictiveAnalysis - A function that handles the predictive analysis process.\n * - PredictiveAnalysisInput - The input type for the predictiveAnalysis function.\n * - PredictiveAnalysisOutput - The return type for the predictiveAnalysis function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\n\nconst IncidentSchema = z.object({\n  id: z.string(),\n  location: z.object({\n    latitude: z.number(),\n    longitude: z.number(),\n  }),\n  category: z.string(),\n  severity: z.string(),\n  summary: z.string(),\n  timestamp: z.string(),\n});\n\nconst PredictiveAnalysisInputSchema = z.object({\n  userLocation: z.object({\n    latitude: z.number(),\n    longitude: z.number(),\n  }),\n  incidents: z.array(IncidentSchema).describe('A list of incidents near the user.'),\n});\nexport type PredictiveAnalysisInput = z.infer<typeof PredictiveAnalysisInputSchema>;\n\nconst PredictiveAnalysisOutputSchema = z.object({\n  analysis: z.string().describe('A detailed analysis of potential issues, including route blockages, traffic jams, and safety advice.'),\n});\nexport type PredictiveAnalysisOutput = z.infer<typeof PredictiveAnalysisOutputSchema>;\n\nexport async function predictiveAnalysis(input: PredictiveAnalysisInput): Promise<PredictiveAnalysisOutput> {\n  return predictiveAnalysisFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'predictiveAnalysisPrompt',\n  input: { schema: PredictiveAnalysisInputSchema },\n  output: { schema: PredictiveAnalysisOutputSchema },\n  prompt: `You are an expert traffic and public safety analyst. Your job is to predict the consequences of various incidents in a user's vicinity.\n\n  **User's Current Location:**\n  Latitude: {{{userLocation.latitude}}}, Longitude: {{{userLocation.longitude}}}\n\n  **Nearby Incidents:**\n  {{#each incidents}}\n  - **Category:** {{category}}\n    - **Severity:** {{severity}}\n    - **Location:** Lat: {{location.latitude}}, Lng: {{location.longitude}}\n    - **Summary:** {{summary}}\n  {{/each}}\n  \n  **Analysis Task:**\n\n  Based on the user's location and the list of nearby incidents, provide a predictive analysis. Your analysis should be concise, actionable, and address the following:\n\n  1.  **Immediate Consequences:** What are the direct impacts of these incidents? (e.g., \"The accident on Main St. is causing a major roadblock.\")\n  2.  **Secondary Effects (Predictions):** What are the likely knock-on effects? Predict potential traffic jams on alternative routes, suggest areas to avoid, and identify any other hazards. (e.g., \"Traffic from the Main St. accident is likely to spill over to Oak Ave, expect heavy congestion there for the next hour. Due to the water logging on 1st Ave, the nearby subway entrance might also be flooded.\")\n  3.  **Safety Advice:** Provide clear, simple safety advice. (e.g., \"Avoid the downtown area if possible. If you must travel, allow for an extra 30 minutes and consider using public transport.\")\n\n  Format your output as a single, coherent report. Use paragraphs and bullet points for clarity.`,\n});\n\nconst predictiveAnalysisFlow = ai.defineFlow(\n  {\n    name: 'predictiveAnalysisFlow',\n    inputSchema: PredictiveAnalysisInputSchema,\n    outputSchema: PredictiveAnalysisOutputSchema,\n  },\n  async (input) => {\n    const { output } = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;;IAuCsB,qBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 407, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/predictive-alerts/page.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { MapComponent } from '@/components/map';\nimport { getIncidents } from '@/lib/incidents-service';\nimport { Incident } from '@/lib/types';\nimport { useToast } from '@/hooks/use-toast';\nimport { LoaderCircle, MapPin, AlertOctagon, Wand2, LocateFixed } from 'lucide-react';\nimport { predictiveAnalysis } from '@/ai/flows/predictive-analysis-flow';\n\n// Haversine formula to calculate distance between two lat/lng points\nconst getDistance = (lat1: number, lon1: number, lat2: number, lon2: number) => {\n  const R = 6371; // Radius of the earth in km\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a =\n    0.5 - Math.cos(dLat) / 2 +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n    (1 - Math.cos(dLon)) / 2;\n  return R * 2 * Math.asin(Math.sqrt(a));\n};\n\nexport default function PredictiveAlertsPage() {\n  const [location, setLocation] = useState<{ latitude: number; longitude: number } | null>(null);\n  const [allIncidents, setAllIncidents] = useState<Incident[]>([]);\n  const [nearbyIncidents, setNearbyIncidents] = useState<Incident[]>([]);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysisResult, setAnalysisResult] = useState<string | null>(null);\n  const { toast } = useToast();\n  const [isLocating, setIsLocating] = useState(true);\n\n  const RADIUS_KM = 3;\n\n  const getLocation = () => {\n    setIsLocating(true);\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setLocation({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude,\n          });\n          setIsLocating(false);\n        },\n        (error) => {\n          console.error(\"Error getting location:\", error);\n          toast({ variant: 'destructive', title: 'Could not get your location.' });\n          setIsLocating(false);\n        }\n      );\n    } else {\n        setIsLocating(false);\n        toast({ variant: 'destructive', title: 'Geolocation is not supported.' });\n    }\n  }\n\n  useEffect(() => {\n    getLocation();\n    \n    const fetchIncidents = async () => {\n      const result = await getIncidents();\n      if (result.success && result.data) {\n        setAllIncidents(result.data);\n      } else {\n        toast({\n          variant: 'destructive',\n          title: 'Failed to load incidents',\n          description: result.error || 'Could not fetch incidents from the server.',\n        });\n      }\n    };\n    fetchIncidents();\n  }, [toast]);\n\n  useEffect(() => {\n    if (location && allIncidents.length > 0) {\n      const nearby = allIncidents.filter(incident => \n        getDistance(location.latitude, location.longitude, incident.location.latitude, incident.location.longitude) <= RADIUS_KM\n      );\n      setNearbyIncidents(nearby);\n    }\n  }, [location, allIncidents]);\n\n  const handlePredictiveAnalysis = async () => {\n    if (!location || nearbyIncidents.length === 0) {\n      toast({\n        variant: 'destructive',\n        title: 'Not enough data',\n        description: 'Cannot perform analysis without location or nearby incidents.',\n      });\n      return;\n    }\n    setIsAnalyzing(true);\n    setAnalysisResult(null);\n    try {\n      const result = await predictiveAnalysis({\n        userLocation: { latitude: location.latitude, longitude: location.longitude },\n        incidents: nearbyIncidents,\n      });\n      setAnalysisResult(result.analysis);\n    } catch (e) {\n      console.error(e);\n      toast({\n        variant: 'destructive',\n        title: 'Analysis Failed',\n        description: 'Could not generate predictive analysis. Please try again.',\n      });\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  return (\n    <div className=\"bg-background min-h-screen\">\n      <main className=\"container mx-auto px-4 py-8 md:py-16\">\n        <header className=\"text-center mb-8\">\n          <h1 className=\"text-4xl sm:text-5xl font-bold font-headline text-primary\">Predictive Alerts</h1>\n          <p className=\"mt-4 text-lg text-muted-foreground\">\n            Analyze incidents in your area to predict potential issues and plan your route.\n          </p>\n        </header>\n        \n        <Card className=\"mb-8\">\n            <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                    <MapPin className=\"w-5 h-5 text-primary\" />\n                    Your Location\n                </CardTitle>\n                <CardDescription>\n                    Incidents are filtered within a {RADIUS_KM}km radius of this point.\n                </CardDescription>\n            </CardHeader>\n            <CardContent>\n                {isLocating ? (\n                     <div className='flex items-center gap-2 text-muted-foreground'>\n                        <LoaderCircle className=\"w-5 h-5 animate-spin\" />\n                        <p>Getting your current location...</p>\n                    </div>\n                ) : location ? (\n                    <div className=\"flex items-center justify-between\">\n                        <p className='text-muted-foreground text-sm font-mono'>\n                           Lat: {location.latitude.toFixed(5)}, Lng: {location.longitude.toFixed(5)}\n                       </p>\n                       <Button variant=\"outline\" size=\"sm\" onClick={getLocation}>\n                            <LocateFixed className=\"w-4 h-4 mr-2\" />\n                            Refresh Location\n                       </Button>\n                    </div>\n                ) : (\n                    <p className='text-destructive'>Location could not be determined.</p>\n                )}\n            </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n          <div className=\"space-y-6\">\n            <Card>\n                <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                        <AlertOctagon className=\"w-5 h-5 text-destructive\" />\n                        Nearby Incidents ({nearbyIncidents.length})\n                    </CardTitle>\n                    <CardDescription>\n                       These are the incidents reported within {RADIUS_KM}km of you.\n                    </CardDescription>\n                </CardHeader>\n                <CardContent className=\"max-h-96 overflow-y-auto\">\n                    {nearbyIncidents.length > 0 ? (\n                        <ul className=\"space-y-4\">\n                            {nearbyIncidents.map(incident => (\n                                <li key={incident.id} className=\"p-3 bg-muted rounded-md\">\n                                    <p className=\"font-semibold\">{incident.category} <span className=\"text-xs font-normal text-muted-foreground\">({incident.severity} severity)</span></p>\n                                    <p className=\"text-sm text-muted-foreground\">{incident.summary}</p>\n                                </li>\n                            ))}\n                        </ul>\n                    ) : (\n                        <p className=\"text-muted-foreground text-center py-4\">\n                            No incidents reported in your immediate area.\n                        </p>\n                    )}\n                </CardContent>\n            </Card>\n\n            <Button onClick={handlePredictiveAnalysis} disabled={isAnalyzing || nearbyIncidents.length === 0} className=\"w-full text-lg py-6\">\n              {isAnalyzing ? (\n                <>\n                  <LoaderCircle className=\"mr-2 h-5 w-5 animate-spin\" />\n                  Analyzing Potential Issues...\n                </>\n              ) : (\n                 <>\n                  <Wand2 className=\"mr-2 h-5 w-5\" />\n                  Run Predictive Analysis\n                 </>\n              )}\n            </Button>\n            \n            {analysisResult && (\n                <Card className=\"animate-in fade-in-50\">\n                    <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                            <Wand2 className=\"w-5 h-5 text-primary\" />\n                            AI-Powered Prediction\n                        </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                        <p className=\"whitespace-pre-wrap text-muted-foreground\">{analysisResult}</p>\n                    </CardContent>\n                </Card>\n            )}\n          </div>\n          <div className=\"h-[600px]\">\n             {location && (\n                <MapComponent\n                    incidents={nearbyIncidents}\n                    onPinClick={() => {}}\n                    center={{ lat: location.latitude, lng: location.longitude }}\n                    zoom={13}\n                    showTraffic\n                />\n             )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}