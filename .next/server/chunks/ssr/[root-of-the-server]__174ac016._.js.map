{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/initiate-agent-call-flow.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview A flow to initiate an agentic call via ElevenLabs.\n *\n * - initiateAgentCall - A function that handles making the outbound call.\n * - InitiateAgentCallInput - The input type for the initiateAgentCall function.\n * - InitiateAgentCallOutput - The return type for the initiateAgentCall function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\n\nconst InitiateAgentCallInputSchema = z.object({\n  agentId: z.string().describe('The ID of the ElevenLabs agent to use.'),\n  agentPhoneNumberId: z.string().describe('The ID of the agent\\'s Twilio phone number.'),\n  toNumber: z.string().describe('The phone number to call.'),\n  incidentSummary: z.string().describe('A summary of the incident for context.'),\n});\nexport type InitiateAgentCallInput = z.infer<typeof InitiateAgentCallInputSchema>;\n\nconst InitiateAgentCallOutputSchema = z.object({\n  success: z.boolean(),\n  message: z.string(),\n  conversation_id: z.string().optional(),\n  callSid: z.string().optional(),\n});\nexport type InitiateAgentCallOutput = z.infer<typeof InitiateAgentCallOutputSchema>;\n\nexport async function initiateAgentCall(input: InitiateAgentCallInput): Promise<InitiateAgentCallOutput> {\n  const apiKey = process.env.ELEVENLABS_API_KEY;\n\n  if (!apiKey) {\n    throw new Error('ElevenLabs API key is not configured in environment variables.');\n  }\n\n  const url = 'https://api.elevenlabs.io/v1/convai/twilio/outbound-call';\n\n  const headers = {\n    'xi-api-key': apiKey,\n    'Content-Type': 'application/json',\n  };\n\n  const body = JSON.stringify({\n    agent_id: input.agentId,\n    agent_phone_number_id: input.agentPhoneNumberId,\n    to_number: input.toNumber,\n    conversation_initiation_client_data: {\n      type: \"conversation_initiation_client_data\",\n      dynamic_variables: {\n          incidentSummary: input.incidentSummary\n      }\n    }\n  });\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: headers,\n      body: body,\n    });\n\n    const responseData = await response.json();\n\n    if (!response.ok) {\n        return {\n            success: false,\n            message: `API Error: ${responseData.detail?.msg || responseData.detail || response.statusText}`,\n        };\n    }\n    \n    // The API returns a 'call_details' object on success, which contains the callSid.\n    // Let's check for that structure.\n    return {\n      success: responseData.success ?? true,\n      message: responseData.message ?? 'Call initiated successfully.',\n      conversation_id: responseData.conversation_id,\n      callSid: responseData.call_details?.callSid,\n    };\n\n  } catch (error: any) {\n    console.error('Error initiating agent call:', error);\n    return {\n      success: false,\n      message: error.message || 'An unknown error occurred.',\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;AAWA;AAAA;;;;;AAEA,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,oBAAoB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACvC;AAGA,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,SAAS,uIAAA,CAAA,IAAC,CAAC,OAAO;IAClB,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM;IACjB,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IACpC,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAC9B;AAGO,eAAe,kBAAkB,KAA6B;IACnE,MAAM,SAAS,QAAQ,GAAG,CAAC,kBAAkB;IAE7C,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,MAAM;IAEZ,MAAM,UAAU;QACd,cAAc;QACd,gBAAgB;IAClB;IAEA,MAAM,OAAO,KAAK,SAAS,CAAC;QAC1B,UAAU,MAAM,OAAO;QACvB,uBAAuB,MAAM,kBAAkB;QAC/C,WAAW,MAAM,QAAQ;QACzB,qCAAqC;YACnC,MAAM;YACN,mBAAmB;gBACf,iBAAiB,MAAM,eAAe;YAC1C;QACF;IACF;IAEA,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,KAAK;YAChC,QAAQ;YACR,SAAS;YACT,MAAM;QACR;QAEA,MAAM,eAAe,MAAM,SAAS,IAAI;QAExC,IAAI,CAAC,SAAS,EAAE,EAAE;YACd,OAAO;gBACH,SAAS;gBACT,SAAS,CAAC,WAAW,EAAE,aAAa,MAAM,EAAE,OAAO,aAAa,MAAM,IAAI,SAAS,UAAU,EAAE;YACnG;QACJ;QAEA,kFAAkF;QAClF,kCAAkC;QAClC,OAAO;YACL,SAAS,aAAa,OAAO,IAAI;YACjC,SAAS,aAAa,OAAO,IAAI;YACjC,iBAAiB,aAAa,eAAe;YAC7C,SAAS,aAAa,YAAY,EAAE;QACtC;IAEF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO;YACL,SAAS;YACT,SAAS,MAAM,OAAO,IAAI;QAC5B;IACF;AACF;;;IA1DsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 291, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/agent-call-test/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {initiateAgentCall as '40b9d00183ae81c705ae3c2833aa70d5c65662448c'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 343, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/agent-call-test/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/agent-call-test/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/agent-call-test/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoS,GACjU,kEACA","debugId":null}},
    {"offset": {"line": 357, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/agent-call-test/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/agent-call-test/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/agent-call-test/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgR,GAC7S,8CACA","debugId":null}},
    {"offset": {"line": 371, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}