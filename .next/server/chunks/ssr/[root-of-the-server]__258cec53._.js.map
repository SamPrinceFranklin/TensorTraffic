{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/analyze-incident-report.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview A flow to analyze incident reports based on media and description.\n *\n * - analyzeIncidentReport - A function that handles the incident analysis process.\n * - AnalyzeIncidentReportInput - The input type for the analyzeIncidentReport function.\n * - AnalyzeIncidentReportOutput - The return type for the analyzeIncidentReport function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst AnalyzeIncidentReportInputSchema = z.object({\n  mediaDataUri: z\n    .string()\n    .describe(\n      \"A photo or video of the incident, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n  description: z.string().describe('The description of the incident.'),\n  location: z.object({\n    latitude: z.number().describe('Latitude of the incident location.'),\n    longitude: z.number().describe('Longitude of the incident location.'),\n  }).describe('The location of the incident.'),\n});\nexport type AnalyzeIncidentReportInput = z.infer<typeof AnalyzeIncidentReportInputSchema>;\n\nconst AnalyzeIncidentReportOutputSchema = z.object({\n  incidentCategory: z.string().describe('The category of the incident.'),\n  severity: z.enum(['Low', 'Medium', 'High']).describe('The severity of the incident.'),\n  summaryReport: z.string().describe('A detailed summary report of the incident.'),\n  callSummary: z.string().describe('A very short summary of the incident, maximum 10 words, for a voice call.'),\n});\nexport type AnalyzeIncidentReportOutput = z.infer<typeof AnalyzeIncidentReportOutputSchema>;\n\nexport async function analyzeIncidentReport(input: AnalyzeIncidentReportInput): Promise<AnalyzeIncidentReportOutput> {\n  return analyzeIncidentReportFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'analyzeIncidentReportPrompt',\n  input: {schema: AnalyzeIncidentReportInputSchema},\n  output: {schema: AnalyzeIncidentReportOutputSchema},\n  prompt: `You are an AI assistant designed to analyze incident reports. Your task is to categorize the incident, determine its severity, and provide both a detailed summary and a very short summary for a voice call.\n\n  **Incident Information:**\n  - **Description:** {{{description}}}\n  - **Location:** Latitude: {{{location.latitude}}}, Longitude: {{{location.longitude}}}\n  - **Media:** {{media url=mediaDataUri}}\n\n  **Analysis Tasks:**\n\n  1.  **Categorize the Incident:** Classify the incident into one of the following categories:\n      *   Road Accidents\n      *   Fire Accidents\n      *   Electrical Issues\n      *   Water Logging\n      *   Drainage/Fallen Tree\n      *   Road Blockages\n      *   Construction Zones\n      *   Other\n\n  2.  **Determine Severity:** Assess the severity of the incident as 'Low', 'Medium', or 'High' based on the visual evidence and description.\n\n  3.  **Generate Detailed Summary:** Write a concise, factual summary of the incident. This will be shown in a report.\n\n  4.  **Generate Call Summary:** Create a very short summary, 10 words maximum, suitable for a voice call to emergency services. Example: \"Car accident with injuries on Main Street.\"\n\n  Provide the output in the requested structured format.`,\n});\n\nconst analyzeIncidentReportFlow = ai.defineFlow(\n  {\n    name: 'analyzeIncidentReportFlow',\n    inputSchema: AnalyzeIncidentReportInputSchema,\n    outputSchema: AnalyzeIncidentReportOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;IAEJ,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACjB,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC9B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,GAAG,QAAQ,CAAC;AACd;AAGA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,kBAAkB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACtC,UAAU,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAO;QAAU;KAAO,EAAE,QAAQ,CAAC;IACrD,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGO,eAAe,sBAAsB,KAAiC;IAC3E,OAAO,0BAA0B;AACnC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAgC;IAChD,QAAQ;QAAC,QAAQ;IAAiC;IAClD,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;wDAyB6C,CAAC;AACzD;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA7CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 322, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp, getApps, getApp } from \"firebase/app\";\nimport { getFirestore } from \"firebase/firestore\";\n\n// A single configuration for Firebase services for the client\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n};\n\n// A server-specific configuration, ensuring we use the correct credentials on the server\nconst firebaseServerConfig = {\n    apiKey: process.env.FIREBASE_API_KEY,\n    authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.FIREBASE_PROJECT_ID,\n    storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.FIREBASE_APP_ID,\n};\n\n// Initialize Firebase\nconst app = !getApps().length ? initializeApp(typeof window === 'undefined' ? firebaseServerConfig : firebaseConfig) : getApp();\nconst db = getFirestore(app);\n\nexport { db };\n"],"names":[],"mappings":"AAAA,uDAAuD;;;;AACvD;AAAA;AACA;AAAA;;;AAEA,8DAA8D;AAC9D,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;AACP;AAEA,yFAAyF;AACzF,MAAM,uBAAuB;IACzB,QAAQ,QAAQ,GAAG,CAAC,gBAAgB;IACpC,YAAY,QAAQ,GAAG,CAAC,oBAAoB;IAC5C,WAAW,QAAQ,GAAG,CAAC,mBAAmB;IAC1C,eAAe,QAAQ,GAAG,CAAC,uBAAuB;IAClD,mBAAmB,QAAQ,GAAG,CAAC,4BAA4B;IAC3D,OAAO,QAAQ,GAAG,CAAC,eAAe;AACtC;AAEA,sBAAsB;AACtB,MAAM,MAAM,CAAC,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,GAAG,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE,uCAAgC,+DAAyC,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD;AAC5H,MAAM,KAAK,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 360, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/incidents-service.ts"],"sourcesContent":["'use server';\n\nimport { db } from '@/lib/firebase';\nimport { collection, addDoc, getDocs, serverTimestamp, Timestamp, doc, updateDoc, increment, getDoc, query, orderBy } from \"firebase/firestore\";\nimport { Incident, Comment } from '@/lib/types';\n\nexport interface IncidentData {\n    location: {\n        latitude: number;\n        longitude: number;\n    };\n    category: string;\n    severity: string;\n    summary: string;\n    address?: string;\n}\n\nexport async function saveIncidentReport(incidentData: IncidentData) {\n    try {\n        const docRef = await addDoc(collection(db, \"incidents\"), {\n            location: incidentData.location,\n            category: incidentData.category,\n            severity: incidentData.severity,\n            summary: incidentData.summary,\n            address: incidentData.address || null,\n            upvotes: 0,\n            timestamp: serverTimestamp(),\n        });\n        console.log(\"Document written with ID: \", docRef.id);\n        return { success: true, id: docRef.id };\n    } catch (e) {\n        console.error(\"Error adding document: \", e);\n        if (e instanceof Error) {\n            if (e.message.includes('PERMISSION_DENIED')) {\n                 return { success: false, error: 'Permission Denied. Please check your Firestore security rules in the Firebase Console. This is a common issue and is required for the app to save data.' };\n            }\n            return { success: false, error: e.message };\n        }\n        return { success: false, error: 'An unknown error occurred while saving the incident report.' };\n    }\n}\n\nexport async function getIncidents() {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'incidents'));\n    const incidents: Incident[] = querySnapshot.docs.map(doc => {\n      const data = doc.data();\n      const timestamp = data.timestamp as Timestamp;\n      \n      return {\n        id: doc.id,\n        location: {\n          latitude: data.location.latitude,\n          longitude: data.location.longitude,\n        },\n        category: data.category,\n        severity: data.severity,\n        summary: data.summary,\n        timestamp: timestamp.toDate().toISOString(),\n        address: data.address || undefined,\n        upvotes: data.upvotes || 0,\n      };\n    });\n    return { success: true, data: incidents };\n  } catch (e) {\n    console.error(\"Error getting documents: \", e);\n    if (e instanceof Error) {\n      if (e.message.includes('PERMISSION_DENIED')) {\n        return { success: false, error: 'Permission Denied. Could not retrieve incidents. Please check your Firestore security rules.' };\n      }\n      return { success: false, error: e.message };\n    }\n    return { success: false, error: 'An unknown error occurred while fetching incidents.' };\n  }\n}\n\nexport async function upvoteIncident(incidentId: string) {\n    try {\n        const incidentRef = doc(db, 'incidents', incidentId);\n        await updateDoc(incidentRef, {\n            upvotes: increment(1)\n        });\n        const updatedDoc = await getDoc(incidentRef);\n        if(updatedDoc.exists()){\n            return { success: true, newUpvotes: updatedDoc.data().upvotes };\n        }\n        return { success: false, error: 'Could not retrieve updated upvote count.' };\n    } catch (e: any) {\n        console.error(\"Error upvoting incident: \", e);\n        if (e.message.includes('PERMISSION_DENIED')) {\n            return { success: false, error: 'Permission Denied. Please check your Firestore security rules to allow incident updates.' };\n        }\n        return { success: false, error: e.message || 'An unknown error occurred while upvoting.' };\n    }\n}\n\nexport async function addComment(incidentId: string, commentText: string) {\n    try {\n        const commentsCollectionRef = collection(db, 'incidents', incidentId, 'comments');\n        const docRef = await addDoc(commentsCollectionRef, {\n            text: commentText,\n            author: 'Anonymous', // In a real app, this would be the logged-in user's ID/name\n            timestamp: serverTimestamp(),\n        });\n        return { success: true, id: docRef.id };\n    } catch (e: any) {\n        console.error(\"Error adding comment: \", e);\n         if (e.message.includes('PERMISSION_DENIED')) {\n            return { success: false, error: 'Permission Denied. Please check your Firestore security rules to allow writing to the comments sub-collection.' };\n        }\n        return { success: false, error: e.message || 'An unknown error occurred while adding the comment.' };\n    }\n}\n\nexport async function getComments(incidentId: string): Promise<{ success: boolean; data?: Comment[], error?: string }> {\n    try {\n        const commentsCollectionRef = collection(db, 'incidents', incidentId, 'comments');\n        const q = query(commentsCollectionRef, orderBy('timestamp', 'desc'));\n        const querySnapshot = await getDocs(q);\n        const comments: Comment[] = querySnapshot.docs.map(doc => {\n            const data = doc.data();\n            const timestamp = data.timestamp as Timestamp;\n            return {\n                id: doc.id,\n                text: data.text,\n                author: data.author,\n                timestamp: timestamp ? timestamp.toDate().toISOString() : new Date().toISOString(),\n            };\n        });\n        return { success: true, data: comments };\n    } catch (e: any) {\n        console.error(\"Error fetching comments: \", e);\n         if (e.message.includes('PERMISSION_DENIED')) {\n            return { success: false, error: 'Permission Denied. Please check your Firestore security rules to allow reading from the comments sub-collection.' };\n        }\n        return { success: false, error: e.message || 'An unknown error occurred while fetching comments.' };\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 566, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/initiate-agent-call-flow.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview A flow to initiate an agentic call via ElevenLabs.\n *\n * - initiateAgentCall - A function that handles making the outbound call.\n * - InitiateAgentCallInput - The input type for the initiateAgentCall function.\n * - InitiateAgentCallOutput - The return type for the initiateAgentCall function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\n\nconst InitiateAgentCallInputSchema = z.object({\n  agentId: z.string().describe('The ID of the ElevenLabs agent to use.'),\n  agentPhoneNumberId: z.string().describe('The ID of the agent\\'s Twilio phone number.'),\n  toNumber: z.string().describe('The phone number to call.'),\n  incidentSummary: z.string().describe('A summary of the incident for context.'),\n});\nexport type InitiateAgentCallInput = z.infer<typeof InitiateAgentCallInputSchema>;\n\nconst InitiateAgentCallOutputSchema = z.object({\n  success: z.boolean(),\n  message: z.string(),\n  conversation_id: z.string().optional(),\n  callSid: z.string().optional(),\n});\nexport type InitiateAgentCallOutput = z.infer<typeof InitiateAgentCallOutputSchema>;\n\nexport async function initiateAgentCall(input: InitiateAgentCallInput): Promise<InitiateAgentCallOutput> {\n  const apiKey = process.env.ELEVENLABS_API_KEY;\n\n  if (!apiKey) {\n    throw new Error('ElevenLabs API key is not configured in environment variables.');\n  }\n\n  const url = 'https://api.elevenlabs.io/v1/convai/twilio/outbound-call';\n\n  const headers = {\n    'xi-api-key': apiKey,\n    'Content-Type': 'application/json',\n  };\n\n  const body = JSON.stringify({\n    agent_id: input.agentId,\n    agent_phone_number_id: input.agentPhoneNumberId,\n    to_number: input.toNumber,\n    conversation_initiation_client_data: {\n      type: \"conversation_initiation_client_data\",\n      dynamic_variables: {\n          incidentSummary: input.incidentSummary\n      }\n    }\n  });\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: headers,\n      body: body,\n    });\n\n    const responseData = await response.json();\n\n    if (!response.ok) {\n        return {\n            success: false,\n            message: `API Error: ${responseData.detail?.msg || responseData.detail || response.statusText}`,\n        };\n    }\n    \n    // The API returns a 'call_details' object on success, which contains the callSid.\n    // Let's check for that structure.\n    return {\n      success: responseData.success ?? true,\n      message: responseData.message ?? 'Call initiated successfully.',\n      conversation_id: responseData.conversation_id,\n      callSid: responseData.call_details?.callSid,\n    };\n\n  } catch (error: any) {\n    console.error('Error initiating agent call:', error);\n    return {\n      success: false,\n      message: error.message || 'An unknown error occurred.',\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;AAWA;AAAA;;;;;AAEA,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,oBAAoB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACvC;AAGA,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,SAAS,uIAAA,CAAA,IAAC,CAAC,OAAO;IAClB,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM;IACjB,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IACpC,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAC9B;AAGO,eAAe,kBAAkB,KAA6B;IACnE,MAAM,SAAS,QAAQ,GAAG,CAAC,kBAAkB;IAE7C,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,MAAM;IAEZ,MAAM,UAAU;QACd,cAAc;QACd,gBAAgB;IAClB;IAEA,MAAM,OAAO,KAAK,SAAS,CAAC;QAC1B,UAAU,MAAM,OAAO;QACvB,uBAAuB,MAAM,kBAAkB;QAC/C,WAAW,MAAM,QAAQ;QACzB,qCAAqC;YACnC,MAAM;YACN,mBAAmB;gBACf,iBAAiB,MAAM,eAAe;YAC1C;QACF;IACF;IAEA,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,KAAK;YAChC,QAAQ;YACR,SAAS;YACT,MAAM;QACR;QAEA,MAAM,eAAe,MAAM,SAAS,IAAI;QAExC,IAAI,CAAC,SAAS,EAAE,EAAE;YACd,OAAO;gBACH,SAAS;gBACT,SAAS,CAAC,WAAW,EAAE,aAAa,MAAM,EAAE,OAAO,aAAa,MAAM,IAAI,SAAS,UAAU,EAAE;YACnG;QACJ;QAEA,kFAAkF;QAClF,kCAAkC;QAClC,OAAO;YACL,SAAS,aAAa,OAAO,IAAI;YACjC,SAAS,aAAa,OAAO,IAAI;YACjC,iBAAiB,aAAa,eAAe;YAC7C,SAAS,aAAa,YAAY,EAAE;QACtC;IAEF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO;YACL,SAAS;YACT,SAAS,MAAM,OAAO,IAAI;QAC5B;IACF;AACF;;;IA1DsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 650, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/report-incident/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {analyzeIncidentReport as '40e0294e05261dd6706fd823407cb45d146f165eb9'} from 'ACTIONS_MODULE0'\nexport {saveIncidentReport as '4037f29f02d18f3c3fe995fbdcbdde84240a652ffa'} from 'ACTIONS_MODULE1'\nexport {initiateAgentCall as '40b9d00183ae81c705ae3c2833aa70d5c65662448c'} from 'ACTIONS_MODULE2'\n"],"names":[],"mappings":";AAAA;AACA;AACA","debugId":null}},
    {"offset": {"line": 714, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/report-incident-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const ReportIncidentForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call ReportIncidentForm() from the server but ReportIncidentForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/report-incident-form.tsx <module evaluation>\",\n    \"ReportIncidentForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,qBAAqB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpD;IAAa,MAAM,IAAI,MAAM;AAAoP,GACjR,yEACA","debugId":null}},
    {"offset": {"line": 728, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/report-incident-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const ReportIncidentForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call ReportIncidentForm() from the server but ReportIncidentForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/report-incident-form.tsx\",\n    \"ReportIncidentForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,qBAAqB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpD;IAAa,MAAM,IAAI,MAAM;AAAoP,GACjR,qDACA","debugId":null}},
    {"offset": {"line": 742, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 752, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/report-incident/page.tsx"],"sourcesContent":["import { ReportIncidentForm } from '@/components/report-incident-form';\n\nexport default function ReportIncidentPage() {\n  return (\n    <div className=\"bg-background min-h-screen\">\n      <main className=\"container mx-auto px-4 py-8 md:py-16\">\n        <header className=\"text-center mb-12\">\n          <h1 className=\"text-4xl sm:text-5xl font-bold font-headline text-primary\">Report an Incident</h1>\n          <p className=\"mt-4 text-lg text-muted-foreground\">Fill out the form below to submit an incident report.</p>\n        </header>\n        <ReportIncidentForm />\n      </main>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAK,WAAU;;8BACd,8OAAC;oBAAO,WAAU;;sCAChB,8OAAC;4BAAG,WAAU;sCAA4D;;;;;;sCAC1E,8OAAC;4BAAE,WAAU;sCAAqC;;;;;;;;;;;;8BAEpD,8OAAC,gJAAA,CAAA,qBAAkB;;;;;;;;;;;;;;;;AAI3B","debugId":null}}]
}