{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/analyze-live-incidents-flow.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview A flow to analyze a list of live incidents from web searches.\n *\n * - analyzeLiveIncidents - A function that handles the live incident analysis process.\n * - AnalyzeLiveIncidentsInput - The input type for the analyzeLiveIncidents function.\n * - AnalyzeLiveIncidentsOutput - The return type for the analyzeLiveIncidents function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\n\nconst LiveIncidentSchema = z.object({\n  id: z.string(),\n  source: z.string(),\n  title: z.string(),\n  summary: z.string(),\n  url: z.string(),\n  timestamp: z.string(),\n  timeAgo: z.string(),\n  location: z.string(),\n});\n\nconst AnalyzeLiveIncidentsInputSchema = z.array(LiveIncidentSchema);\nexport type AnalyzeLiveIncidentsInput = z.infer<typeof AnalyzeLiveIncidentsInputSchema>;\n\nconst AnalyzeLiveIncidentsOutputSchema = z.object({\n    incidentCategory: z.string().describe(\"A concise category for the event (e.g., 'Protest', 'Road Closure', 'Public Event', 'Power Outage').\"),\n    analysisSummary: z.string().describe(\"A summary of the event and its potential impact on traffic, safety, or public access.\"),\n});\nexport type AnalyzeLiveIncidentsOutput = z.infer<typeof AnalyzeLiveIncidentsOutputSchema>;\n\n\nexport async function analyzeLiveIncidents(input: AnalyzeLiveIncidentsInput): Promise<AnalyzeLiveIncidentsOutput> {\n  return analyzeLiveIncidentsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'analyzeLiveIncidentsPrompt',\n  input: { schema: AnalyzeLiveIncidentsInputSchema },\n  output: { schema: AnalyzeLiveIncidentsOutputSchema },\n  prompt: `You are a civic intelligence analyst. Your task is to analyze a list of search results about local events and determine the potential impact on the public.\n\n  Review the following search result items:\n  {{#each this}}\n  - **Title:** {{title}}\n    - **URL:** {{url}}\n    - **Summary:** {{summary}}\n  {{/each}}\n  \n  **Analysis Task:**\n\n  1.  **Synthesize:** Read all the items and identify the core event or incident being reported.\n  2.  **Categorize:** Assign a single, concise category to this event (e.g., \"Protest\", \"Road Closure\", \"Infrastructure Work\", \"Public Event\", \"Power Outage\").\n  3.  **Summarize Impact:** Write a brief, one or two-sentence summary describing the event and its most likely impact on the public. Focus on things like road closures, traffic delays, or safety advice.\n\n  Provide the output in the requested structured format.\n  `,\n});\n\nconst analyzeLiveIncidentsFlow = ai.defineFlow(\n  {\n    name: 'analyzeLiveIncidentsFlow',\n    inputSchema: AnalyzeLiveIncidentsInputSchema,\n    outputSchema: AnalyzeLiveIncidentsOutputSchema,\n  },\n  async (input) => {\n    // If there are no incidents, return a default \"clear\" state.\n    if (input.length === 0) {\n        return {\n            incidentCategory: 'No Incidents',\n            analysisSummary: 'No significant civic incidents or disruptions were found in the selected area for the last 48 hours.',\n        };\n    }\n    const { output } = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClC,IAAI,uIAAA,CAAA,IAAC,CAAC,MAAM;IACZ,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM;IAChB,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM;IACf,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM;IACjB,KAAK,uIAAA,CAAA,IAAC,CAAC,MAAM;IACb,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM;IACnB,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM;IACjB,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM;AACpB;AAEA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC;AAGhD,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,kBAAkB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACtC,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACzC;AAIO,eAAe,qBAAqB,KAAgC;IACzE,OAAO,yBAAyB;AAClC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAE,QAAQ;IAAgC;IACjD,QAAQ;QAAE,QAAQ;IAAiC;IACnD,QAAQ,CAAC;;;;;;;;;;;;;;;;EAgBT,CAAC;AACH;AAEA,MAAM,2BAA2B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC5C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,6DAA6D;IAC7D,IAAI,MAAM,MAAM,KAAK,GAAG;QACpB,OAAO;YACH,kBAAkB;YAClB,iBAAiB;QACrB;IACJ;IACA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,OAAO;AACT;;;IA3CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/live-incidents-service.ts"],"sourcesContent":["\n'use server';\n\nimport { formatDistanceToNow } from 'date-fns';\nimport { analyzeLiveIncidents, AnalyzeLiveIncidentsOutput, AnalyzeLiveIncidentsInput } from '@/ai/flows/analyze-live-incidents-flow';\n\nexport interface LiveIncident {\n  id: string;\n  source: 'Web' | 'Social Media' | 'Official';\n  title: string;\n  summary: string;\n  url: string;\n  timestamp: string; // ISO string\n  timeAgo: string;\n  location: string;\n}\n\nexport interface AnalyzedIncidentReport {\n    analysis: AnalyzeLiveIncidentsOutput;\n    supportingIncidents: LiveIncident[];\n}\n\ninterface PerplexitySearchResult {\n    title: string;\n    url: string;\n}\n\nexport async function getLiveIncidents(location: {\n  lat: number;\n  lng: number;\n  address: string;\n}): Promise<{ success: boolean; data?: AnalyzedIncidentReport, error?: string }> {\n  const apiKey = process.env.PERPLEXITY_API_KEY;\n\n  if (!apiKey) {\n    return { success: false, error: 'Perplexity API key is not configured. Please add PERPLEXITY_API_KEY to your .env file.' };\n  }\n\n  const url = \"https://api.perplexity.ai/chat/completions\";\n\n  const userPrompt = `Find latest civic incidents or disruptions from the last 2 days near ${location.address}. Consolidate multiple reports of the same event into a single summary. Focus on events affecting commute like protests, tree fall, water flooding, or traffic regulation changes.`;\n  \n  const payload = {\n    model: \"sonar\",\n    messages: [\n        { \"role\": \"user\", \"content\": userPrompt }\n    ],\n  };\n\n  const headers = {\n    \"Authorization\": `Bearer ${apiKey}`,\n    \"Content-Type\": \"application/json\"\n  };\n\n  try {\n    const response = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: headers\n    });\n\n    const responseData = await response.json();\n\n    if (!response.ok) {\n        throw new Error(responseData.error?.message || 'Perplexity API request failed');\n    }\n    \n    if (!responseData.search_results || !Array.isArray(responseData.search_results)) {\n         throw new Error('Invalid response structure from Perplexity API: search_results is missing.');\n    }\n\n    const incidentsArray: PerplexitySearchResult[] = responseData.search_results;\n\n    const liveIncidents: LiveIncident[] = incidentsArray.map((item, index) => ({\n        id: `live-${index}-${new Date().getTime()}`,\n        source: 'Web',\n        title: item.title,\n        summary: 'Source: ' + new URL(item.url).hostname,\n        url: item.url,\n        timestamp: new Date().toISOString(),\n        timeAgo: 'Just now',\n        location: location.address,\n    }));\n    \n    // Now, send the fetched incidents to Gemini for analysis\n    const analysisResult = await analyzeLiveIncidents(liveIncidents);\n    \n    const finalReport: AnalyzedIncidentReport = {\n        analysis: analysisResult,\n        supportingIncidents: liveIncidents,\n    };\n\n    return { success: true, data: finalReport };\n\n  } catch (error: any) {\n    console.error(\"Error fetching live incidents:\", error);\n    return { success: false, error: error.message || \"An unknown error occurred.\" };\n  }\n}\n"],"names":[],"mappings":";;;;;AAIA;;;;;AAuBO,eAAe,iBAAiB,QAItC;IACC,MAAM,SAAS,QAAQ,GAAG,CAAC,kBAAkB;IAE7C,IAAI,CAAC,QAAQ;QACX,OAAO;YAAE,SAAS;YAAO,OAAO;QAAyF;IAC3H;IAEA,MAAM,MAAM;IAEZ,MAAM,aAAa,CAAC,qEAAqE,EAAE,SAAS,OAAO,CAAC,kLAAkL,CAAC;IAE/R,MAAM,UAAU;QACd,OAAO;QACP,UAAU;YACN;gBAAE,QAAQ;gBAAQ,WAAW;YAAW;SAC3C;IACH;IAEA,MAAM,UAAU;QACd,iBAAiB,CAAC,OAAO,EAAE,QAAQ;QACnC,gBAAgB;IAClB;IAEA,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,KAAK;YAC9B,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;YACrB,SAAS;QACb;QAEA,MAAM,eAAe,MAAM,SAAS,IAAI;QAExC,IAAI,CAAC,SAAS,EAAE,EAAE;YACd,MAAM,IAAI,MAAM,aAAa,KAAK,EAAE,WAAW;QACnD;QAEA,IAAI,CAAC,aAAa,cAAc,IAAI,CAAC,MAAM,OAAO,CAAC,aAAa,cAAc,GAAG;YAC5E,MAAM,IAAI,MAAM;QACrB;QAEA,MAAM,iBAA2C,aAAa,cAAc;QAE5E,MAAM,gBAAgC,eAAe,GAAG,CAAC,CAAC,MAAM,QAAU,CAAC;gBACvE,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,IAAI,OAAO,OAAO,IAAI;gBAC3C,QAAQ;gBACR,OAAO,KAAK,KAAK;gBACjB,SAAS,aAAa,IAAI,IAAI,KAAK,GAAG,EAAE,QAAQ;gBAChD,KAAK,KAAK,GAAG;gBACb,WAAW,IAAI,OAAO,WAAW;gBACjC,SAAS;gBACT,UAAU,SAAS,OAAO;YAC9B,CAAC;QAED,yDAAyD;QACzD,MAAM,iBAAiB,MAAM,CAAA,GAAA,0JAAA,CAAA,uBAAoB,AAAD,EAAE;QAElD,MAAM,cAAsC;YACxC,UAAU;YACV,qBAAqB;QACzB;QAEA,OAAO;YAAE,SAAS;YAAM,MAAM;QAAY;IAE5C,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO,IAAI;QAA6B;IAChF;AACF;;;IAvEsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 403, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/places-service.ts"],"sourcesContent":["\n'use server';\n\nexport interface AutocompletePrediction {\n    placeId: string;\n    description: string;\n}\n\nexport interface PlaceDetails {\n    name: string;\n    address: string;\n    location: {\n        lat: number;\n        lng: number;\n    }\n}\n\nexport async function autocompletePlaces(\n  query: string,\n  location: { lat: number, lng: number } | null,\n  types: string[]\n): Promise<{ success: boolean; data?: AutocompletePrediction[], error?: string }> {\n  const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\n  if (!apiKey) {\n    return { success: false, error: \"Google Maps API key is not configured on the server.\" };\n  }\n  \n  const url = 'https://places.googleapis.com/v1/places:autocomplete';\n\n  const headers = {\n    'Content-Type': 'application/json',\n    'X-Goog-Api-Key': apiKey,\n  };\n\n  const body = JSON.stringify({\n    input: query,\n    includedPrimaryTypes: types,\n    ...(location && {\n        locationRestriction: {\n            circle: {\n                center: {\n                    latitude: location.lat,\n                    longitude: location.lng,\n                },\n                radius: 10000.0, // 10km radius bias\n            },\n        }\n    }),\n  });\n\n  try {\n    const response = await fetch(url, { method: 'POST', headers, body });\n    const data = await response.json();\n\n    if (data.error || !data.suggestions) {\n        return { success: false, error: `Places Autocomplete error: ${data.error?.message || 'No results'}` };\n    }\n\n    const predictions: AutocompletePrediction[] = data.suggestions.map((prediction: any) => ({\n      placeId: prediction.placePrediction.place,\n      description: prediction.placePrediction.text.text,\n    }));\n    \n    return { success: true, data: predictions };\n  } catch (e) {\n    console.error(\"Error fetching autocomplete places:\", e);\n    return { success: false, error: 'An unknown error occurred while fetching autocomplete results.' };\n  }\n}\n\nexport async function getPlaceDetails(placeId: string): Promise<{ success: boolean, data?: PlaceDetails, error?: string }> {\n     const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\n    if (!apiKey) {\n        return { success: false, error: \"Google Maps API key is not configured on the server.\" };\n    }\n    \n    const url = `https://places.googleapis.com/v1/${placeId}`;\n    const headers = {\n        'Content-Type': 'application/json',\n        'X-Goog-Api-Key': apiKey,\n        'X-Goog-FieldMask': 'displayName,formattedAddress,location'\n    };\n    \n    try {\n        const response = await fetch(url, { headers });\n        const data = await response.json();\n        \n        if (data.error) {\n             return { success: false, error: `Place Details error: ${data.error?.message || 'Not found'}` };\n        }\n        \n        const details: PlaceDetails = {\n            name: data.displayName.text,\n            address: data.formattedAddress,\n            location: {\n                lat: data.location.latitude,\n                lng: data.location.longitude,\n            }\n        };\n        \n        return { success: true, data: details };\n    } catch(e) {\n        console.error(\"Error fetching place details:\", e);\n        return { success: false, error: 'An unknown error occurred while fetching place details.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;AAiBO,eAAe,mBACpB,KAAa,EACb,QAA6C,EAC7C,KAAe;IAEf,MAAM;IACN,uCAAa;;IAEb;IAEA,MAAM,MAAM;IAEZ,MAAM,UAAU;QACd,gBAAgB;QAChB,kBAAkB;IACpB;IAEA,MAAM,OAAO,KAAK,SAAS,CAAC;QAC1B,OAAO;QACP,sBAAsB;QACtB,GAAI,YAAY;YACZ,qBAAqB;gBACjB,QAAQ;oBACJ,QAAQ;wBACJ,UAAU,SAAS,GAAG;wBACtB,WAAW,SAAS,GAAG;oBAC3B;oBACA,QAAQ;gBACZ;YACJ;QACJ,CAAC;IACH;IAEA,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,KAAK;YAAE,QAAQ;YAAQ;YAAS;QAAK;QAClE,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,WAAW,EAAE;YACjC,OAAO;gBAAE,SAAS;gBAAO,OAAO,CAAC,2BAA2B,EAAE,KAAK,KAAK,EAAE,WAAW,cAAc;YAAC;QACxG;QAEA,MAAM,cAAwC,KAAK,WAAW,CAAC,GAAG,CAAC,CAAC,aAAoB,CAAC;gBACvF,SAAS,WAAW,eAAe,CAAC,KAAK;gBACzC,aAAa,WAAW,eAAe,CAAC,IAAI,CAAC,IAAI;YACnD,CAAC;QAED,OAAO;YAAE,SAAS;YAAM,MAAM;QAAY;IAC5C,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC,uCAAuC;QACrD,OAAO;YAAE,SAAS;YAAO,OAAO;QAAiE;IACnG;AACF;AAEO,eAAe,gBAAgB,OAAe;IAChD,MAAM;IACP,uCAAa;;IAEb;IAEA,MAAM,MAAM,CAAC,iCAAiC,EAAE,SAAS;IACzD,MAAM,UAAU;QACZ,gBAAgB;QAChB,kBAAkB;QAClB,oBAAoB;IACxB;IAEA,IAAI;QACA,MAAM,WAAW,MAAM,MAAM,KAAK;YAAE;QAAQ;QAC5C,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,IAAI,KAAK,KAAK,EAAE;YACX,OAAO;gBAAE,SAAS;gBAAO,OAAO,CAAC,qBAAqB,EAAE,KAAK,KAAK,EAAE,WAAW,aAAa;YAAC;QAClG;QAEA,MAAM,UAAwB;YAC1B,MAAM,KAAK,WAAW,CAAC,IAAI;YAC3B,SAAS,KAAK,gBAAgB;YAC9B,UAAU;gBACN,KAAK,KAAK,QAAQ,CAAC,QAAQ;gBAC3B,KAAK,KAAK,QAAQ,CAAC,SAAS;YAChC;QACJ;QAEA,OAAO;YAAE,SAAS;YAAM,MAAM;QAAQ;IAC1C,EAAE,OAAM,GAAG;QACP,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO;YAAE,SAAS;YAAO,OAAO;QAA0D;IAC9F;AACJ;;;IAxFsB;IAqDA;;AArDA,+OAAA;AAqDA,+OAAA","debugId":null}},
    {"offset": {"line": 521, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/live-agent/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getLiveIncidents as '40345ca53538fa85c76ef155f22942baa3aeea00ea'} from 'ACTIONS_MODULE0'\nexport {autocompletePlaces as '703d691f6a2d8afc25d950676f09476be54bcf8a08'} from 'ACTIONS_MODULE1'\nexport {getPlaceDetails as '405bbe91130606ed9b9d33a6350719f17e88c55e52'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 582, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/live-agent/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/live-agent/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/live-agent/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+R,GAC5T,6DACA","debugId":null}},
    {"offset": {"line": 596, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/live-agent/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/live-agent/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/live-agent/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2Q,GACxS,yCACA","debugId":null}},
    {"offset": {"line": 610, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}