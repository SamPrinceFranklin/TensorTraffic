{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/places-service.ts"],"sourcesContent":["\n'use server';\n\ninterface SchoolResult {\n    id: string;\n    displayName: {\n        text: string;\n    },\n    formattedAddress: string;\n    location: {\n        latitude: number;\n        longitude: number;\n    }\n}\n\ninterface AutocompletePrediction {\n    place: string;\n    placeId: string;\n    text: {\n        text: string;\n        matches: {\n            startOffset: number;\n            endOffset: number;\n        }[];\n    };\n}\n\ninterface PlaceDetails {\n    name: string;\n    address: string;\n    location: {\n        lat: number;\n        lng: number;\n    }\n}\n\nexport async function autocompletePlaces(\n  query: string,\n  location: { lat: number, lng: number } | null,\n  types: string[]\n): Promise<{ success: boolean; data?: any[], error?: string }> {\n  const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\n  if (!apiKey) {\n    return { success: false, error: \"Google Maps API key is not configured on the server.\" };\n  }\n  \n  const url = 'https://places.googleapis.com/v1/places:autocomplete';\n\n  const headers = {\n    'Content-Type': 'application/json',\n    'X-Goog-Api-Key': apiKey,\n  };\n\n  const body = JSON.stringify({\n    input: query,\n    includedPrimaryTypes: types,\n    ...(location && {\n        locationRestriction: {\n            circle: {\n                center: {\n                    latitude: location.lat,\n                    longitude: location.lng,\n                },\n                radius: 10000.0, // 10km radius bias\n            },\n        }\n    }),\n  });\n\n  try {\n    const response = await fetch(url, { method: 'POST', headers, body });\n    const data = await response.json();\n\n    if (data.error || !data.suggestions) {\n        return { success: false, error: `Places Autocomplete error: ${data.error?.message || 'No results'}` };\n    }\n\n    const predictions = data.suggestions.map((prediction: AutocompletePrediction) => ({\n      placeId: prediction.placeId,\n      description: prediction.text.text,\n    }));\n    \n    return { success: true, data: predictions };\n  } catch (e) {\n    console.error(\"Error fetching autocomplete places:\", e);\n    return { success: false, error: 'An unknown error occurred while fetching autocomplete results.' };\n  }\n}\n\nexport async function getPlaceDetails(placeId: string): Promise<{ success: boolean, data?: PlaceDetails, error?: string }> {\n     const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\n    if (!apiKey) {\n        return { success: false, error: \"Google Maps API key is not configured on the server.\" };\n    }\n    \n    const url = `https://places.googleapis.com/v1/places/${placeId}`;\n    const headers = {\n        'Content-Type': 'application/json',\n        'X-Goog-Api-Key': apiKey,\n        'X-Goog-FieldMask': 'displayName,formattedAddress,location'\n    };\n    \n    try {\n        const response = await fetch(url, { headers });\n        const data = await response.json();\n        \n        if (data.error) {\n             return { success: false, error: `Place Details error: ${data.error?.message || 'Not found'}` };\n        }\n        \n        const details: PlaceDetails = {\n            name: data.displayName.text,\n            address: data.formattedAddress,\n            location: {\n                lat: data.location.latitude,\n                lng: data.location.longitude,\n            }\n        };\n        \n        return { success: true, data: details };\n    } catch(e) {\n        console.error(\"Error fetching place details:\", e);\n        return { success: false, error: 'An unknown error occurred while fetching place details.' };\n    }\n}\n\n\nexport async function findNearbySchools(\n  location: { lat: number, lng: number }\n): Promise<{ success: boolean; data?: any[], error?: string }> {\n  const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\n  if (!apiKey) {\n    return { success: false, error: \"Google Maps API key is not configured on the server.\" };\n  }\n  \n  const url = 'https://places.googleapis.com/v1/places:searchNearby';\n\n  const headers = {\n    'Content-Type': 'application/json',\n    'X-Goog-Api-Key': apiKey,\n    'X-Goog-FieldMask': 'places.id,places.displayName,places.formattedAddress,places.location',\n  };\n\n  const body = JSON.stringify({\n    includedTypes: [\"school\", \"primary_school\", \"secondary_school\"],\n    maxResultCount: 10,\n    locationRestriction: {\n      circle: {\n        center: {\n          latitude: location.lat,\n          longitude: location.lng,\n        },\n        radius: 5000.0, // 5km radius\n      },\n    },\n  });\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers,\n      body,\n    });\n    \n    const data = await response.json();\n\n    if (data.error || !data.places) {\n        return { success: false, error: `Places API error: ${data.error?.message || 'No results'}` };\n    }\n\n    const schools = data.places.map((school: SchoolResult) => ({\n      place_id: school.id,\n      name: school.displayName.text,\n      vicinity: school.formattedAddress,\n      location: {\n        lat: school.location.latitude,\n        lng: school.location.longitude,\n      }\n    }));\n\n    return { success: true, data: schools };\n  } catch (e) {\n    console.error(\"Error fetching nearby schools:\", e);\n    return { success: false, error: 'An unknown error occurred while fetching schools.' };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 190, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/directions-service.ts"],"sourcesContent":["\n'use server';\n\nexport interface DirectionDetails {\n    distance: string;\n    duration: string;\n    durationInTraffic: string;\n    summary: string;\n    polyline: string;\n    trafficStatus: 'light' | 'moderate' | 'heavy';\n}\n\nfunction getTrafficStatus(duration: number, durationInTraffic: number): 'light' | 'moderate' | 'heavy' {\n    const ratio = durationInTraffic / duration;\n    if (ratio < 1.2) return 'light';\n    if (ratio < 1.6) return 'moderate';\n    return 'heavy';\n}\n\nexport async function getDirections(\n  origin: { lat: number; lng: number },\n  destination: { lat: number; lng: number }\n): Promise<{ success: boolean; data?: DirectionDetails, error?: string; }> {\n  const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\n  if (!apiKey) {\n    return { success: false, error: \"Google Maps API key is not configured on the server.\" };\n  }\n\n  const url = new URL('https://maps.googleapis.com/maps/api/directions/json');\n  url.searchParams.append('origin', `${origin.lat},${origin.lng}`);\n  url.searchParams.append('destination', `${destination.lat},${destination.lng}`);\n  url.searchParams.append('key', apiKey);\n  url.searchParams.append('departure_time', 'now');\n\n  try {\n    const response = await fetch(url.toString());\n    const data = await response.json();\n\n    if (data.status !== 'OK' || !data.routes || data.routes.length === 0) {\n      return { success: false, error: `Directions API error: ${data.status} - ${data.error_message || 'No routes found.'}` };\n    }\n\n    const route = data.routes[0];\n    const leg = route.legs[0];\n    \n    if (!leg.distance || !leg.duration || !leg.duration_in_traffic) {\n        return { success: false, error: 'Directions response missing required fields.'}\n    }\n    \n    const trafficStatus = getTrafficStatus(leg.duration.value, leg.duration_in_traffic.value);\n\n    const details: DirectionDetails = {\n      distance: leg.distance.text,\n      duration: leg.duration.text,\n      durationInTraffic: leg.duration_in_traffic.text,\n      summary: route.summary,\n      polyline: route.overview_polyline.points,\n      trafficStatus,\n    };\n\n    return { success: true, data: details };\n  } catch (e) {\n    console.error(\"Error fetching directions:\", e);\n    return { success: false, error: 'An unknown error occurred while fetching directions.' };\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAYA,SAAS,iBAAiB,QAAgB,EAAE,iBAAyB;IACjE,MAAM,QAAQ,oBAAoB;IAClC,IAAI,QAAQ,KAAK,OAAO;IACxB,IAAI,QAAQ,KAAK,OAAO;IACxB,OAAO;AACX;AAEO,eAAe,cACpB,MAAoC,EACpC,WAAyC;IAEzC,MAAM;IACN,uCAAa;;IAEb;IAEA,MAAM,MAAM,IAAI,IAAI;IACpB,IAAI,YAAY,CAAC,MAAM,CAAC,UAAU,GAAG,OAAO,GAAG,CAAC,CAAC,EAAE,OAAO,GAAG,EAAE;IAC/D,IAAI,YAAY,CAAC,MAAM,CAAC,eAAe,GAAG,YAAY,GAAG,CAAC,CAAC,EAAE,YAAY,GAAG,EAAE;IAC9E,IAAI,YAAY,CAAC,MAAM,CAAC,OAAO;IAC/B,IAAI,YAAY,CAAC,MAAM,CAAC,kBAAkB;IAE1C,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,IAAI,QAAQ;QACzC,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,IAAI,KAAK,MAAM,KAAK,QAAQ,CAAC,KAAK,MAAM,IAAI,KAAK,MAAM,CAAC,MAAM,KAAK,GAAG;YACpE,OAAO;gBAAE,SAAS;gBAAO,OAAO,CAAC,sBAAsB,EAAE,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,aAAa,IAAI,oBAAoB;YAAC;QACvH;QAEA,MAAM,QAAQ,KAAK,MAAM,CAAC,EAAE;QAC5B,MAAM,MAAM,MAAM,IAAI,CAAC,EAAE;QAEzB,IAAI,CAAC,IAAI,QAAQ,IAAI,CAAC,IAAI,QAAQ,IAAI,CAAC,IAAI,mBAAmB,EAAE;YAC5D,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAA8C;QAClF;QAEA,MAAM,gBAAgB,iBAAiB,IAAI,QAAQ,CAAC,KAAK,EAAE,IAAI,mBAAmB,CAAC,KAAK;QAExF,MAAM,UAA4B;YAChC,UAAU,IAAI,QAAQ,CAAC,IAAI;YAC3B,UAAU,IAAI,QAAQ,CAAC,IAAI;YAC3B,mBAAmB,IAAI,mBAAmB,CAAC,IAAI;YAC/C,SAAS,MAAM,OAAO;YACtB,UAAU,MAAM,iBAAiB,CAAC,MAAM;YACxC;QACF;QAEA,OAAO;YAAE,SAAS;YAAM,MAAM;QAAQ;IACxC,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;YAAE,SAAS;YAAO,OAAO;QAAuD;IACzF;AACF;;;IA9CsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 263, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/parental-alerts/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getPlaceDetails as '405bbe91130606ed9b9d33a6350719f17e88c55e52'} from 'ACTIONS_MODULE0'\nexport {getDirections as '605c475562d35e360b80be5744d708475ce6db66b6'} from 'ACTIONS_MODULE1'\nexport {autocompletePlaces as '703d691f6a2d8afc25d950676f09476be54bcf8a08'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 324, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/parental-alerts/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/parental-alerts/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/parental-alerts/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoS,GACjU,kEACA","debugId":null}},
    {"offset": {"line": 338, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/parental-alerts/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/parental-alerts/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/parental-alerts/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgR,GAC7S,8CACA","debugId":null}},
    {"offset": {"line": 352, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}