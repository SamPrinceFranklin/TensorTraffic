{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/custom-map-pin.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { LucideProps } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface CustomMapPinProps {\n  icon: React.ElementType<LucideProps>;\n  className?: string;\n}\n\nexport function CustomMapPin({ icon: Icon, className }: CustomMapPinProps) {\n  return (\n    <div\n      className={cn(\n        'w-8 h-8 rounded-full bg-background border-2 border-foreground flex items-center justify-center shadow-md',\n        className\n      )}\n    >\n      <Icon className={cn('w-5 h-5 text-foreground', className)} />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAIA;AAJA;;;AAWO,SAAS,aAAa,EAAE,MAAM,IAAI,EAAE,SAAS,EAAqB;IACvE,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4GACA;kBAGF,cAAA,8OAAC;YAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,2BAA2B;;;;;;;;;;;AAGrD","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/map.tsx"],"sourcesContent":["\n'use client';\n\nimport React, { useMemo, useEffect, useCallback } from 'react';\nimport { GoogleMap, useJsApiLoader, OverlayView, TrafficLayer, Polyline } from '@react-google-maps/api';\nimport { CustomMapPin } from './custom-map-pin';\nimport { Droplets, Car, PowerOff, AlertTriangle, Construction, TreeDeciduous, TrafficCone, Home, School } from 'lucide-react';\nimport { Incident } from '@/lib/types';\n\nconst defaultContainerStyle = {\n  width: '100%',\n  height: '100%',\n  borderRadius: '0.5rem',\n};\n\nconst defaultCenter = {\n  lat: 37.7749,\n  lng: -122.4194,\n};\n\nconst getPixelPositionOffset = (width: number, height: number) => ({\n  x: -(width / 2),\n  y: -(height / 2),\n});\n\nconst categoryStyles: { [key: string]: { icon: React.ElementType; className: string } } = {\n    'Water Logging': { icon: Droplets, className: 'bg-blue-100 border-blue-500 text-blue-500' },\n    'Road Accidents': { icon: Car, className: 'bg-red-100 border-red-500 text-red-500' },\n    'Accident': { icon: Car, className: 'bg-red-100 border-red-500 text-red-500' },\n    'Fire Accidents': { icon: TrafficCone, className: 'bg-orange-100 border-orange-500 text-orange-500' },\n    'Electrical Issues': { icon: PowerOff, className: 'bg-yellow-100 border-yellow-500 text-yellow-500' },\n    'PowerCut': { icon: PowerOff, className: 'bg-yellow-100 border-yellow-500 text-yellow-500' },\n    'Drainage/Fallen Tree': { icon: TreeDeciduous, className: 'bg-green-100 border-green-500 text-green-500' },\n    'Road Blockages': { icon: TrafficCone, className: 'bg-gray-100 border-gray-500 text-gray-500' },\n    'Construction Zones': { icon: Construction, className: 'bg-indigo-100 border-indigo-500 text-indigo-500' },\n    'Home': { icon: Home, className: 'bg-green-100 border-green-500 text-green-500' },\n    'School': { icon: School, className: 'bg-blue-100 border-blue-500 text-blue-500' },\n    'Other': { icon: AlertTriangle, className: 'bg-purple-100 border-purple-500 text-purple-500' },\n};\n\ninterface MapComponentProps {\n  incidents: Incident[];\n  onPinClick: (incident: Incident) => void;\n  onMapClick?: (e: google.maps.MapMouseEvent) => void;\n  onMapLoad?: (isLoaded: boolean) => void;\n  center?: { lat: number; lng: number };\n  zoom?: number;\n  containerStyle?: React.CSSProperties;\n  showTraffic?: boolean;\n  routePolyline?: string;\n}\n\nexport function MapComponent({ \n  incidents,\n  onPinClick,\n  onMapClick,\n  onMapLoad,\n  center = defaultCenter,\n  zoom = 12,\n  containerStyle = defaultContainerStyle,\n  showTraffic = false,\n  routePolyline\n}: MapComponentProps) {\n  const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\n\n  const { isLoaded, loadError } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: apiKey || '',\n    libraries: ['places', 'routes', 'geometry'],\n  });\n\n  const handleMapLoad = useCallback(() => {\n    if (onMapLoad) {\n      onMapLoad(true);\n    }\n  }, [onMapLoad]);\n  \n  const decodedPath = useMemo(() => {\n    if (isLoaded && routePolyline && window.google?.maps?.geometry?.encoding) {\n        return window.google.maps.geometry.encoding.decodePath(routePolyline);\n    }\n    return [];\n  }, [isLoaded, routePolyline]);\n\n  if (loadError) {\n    return (\n      <div className=\"flex items-center justify-center h-full bg-muted rounded-lg\">\n        <p className=\"text-destructive\">\n          Error loading maps.\n        </p>\n      </div>\n    );\n  }\n\n  if (!isLoaded) {\n    return (\n       <div className=\"flex items-center justify-center h-full bg-muted rounded-lg\">\n        <p>Loading Map...</p>\n      </div>\n    );\n  }\n\n  if (!apiKey) {\n    return (\n      <div className=\"flex items-center justify-center h-full bg-muted rounded-lg\">\n        <p className=\"text-destructive\">\n          Google Maps API key is missing. Please add it to your .env file.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={zoom} onClick={onMapClick} onLoad={handleMapLoad}>\n      {incidents.map(incident => {\n          const style = categoryStyles[incident.category] || categoryStyles['Other'];\n          if (!style) return null;\n          return (\n            <OverlayView\n              key={incident.id}\n              position={{ lat: incident.location.latitude, lng: incident.location.longitude }}\n              mapPaneName={OverlayView.OVERLAY_MOUSE_TARGET}\n              getPixelPositionOffset={getPixelPositionOffset}\n            >\n              <div onClick={() => onPinClick(incident)} style={{cursor: 'pointer'}}>\n                <CustomMapPin icon={style.icon} className={style.className} />\n              </div>\n            </OverlayView>\n          )\n      })}\n      {showTraffic && <TrafficLayer autoUpdate />}\n      {decodedPath.length > 0 && (\n        <Polyline\n            path={decodedPath}\n            options={{\n                strokeColor: '#FF0000',\n                strokeOpacity: 0.8,\n                strokeWeight: 4,\n            }}\n        />\n      )}\n    </GoogleMap>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 339, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/incidents-service.ts"],"sourcesContent":["'use server';\n\nimport { db } from '@/lib/firebase';\nimport { collection, addDoc, getDocs, serverTimestamp, Timestamp } from \"firebase/firestore\";\nimport { Incident } from '@/lib/types';\n\nexport interface IncidentData {\n    location: {\n        latitude: number;\n        longitude: number;\n    };\n    category: string;\n    severity: string;\n    summary: string;\n}\n\nexport async function saveIncidentReport(incidentData: IncidentData) {\n    try {\n        const docRef = await addDoc(collection(db, \"incidents\"), {\n            location: incidentData.location,\n            category: incidentData.category,\n            severity: incidentData.severity,\n            summary: incidentData.summary,\n            timestamp: serverTimestamp(),\n        });\n        console.log(\"Document written with ID: \", docRef.id);\n        return { success: true, id: docRef.id };\n    } catch (e) {\n        console.error(\"Error adding document: \", e);\n        if (e instanceof Error) {\n            if (e.message.includes('PERMISSION_DENIED')) {\n                 return { success: false, error: 'Permission Denied. Please check your Firestore security rules in the Firebase Console. This is a common issue and is required for the app to save data.' };\n            }\n            return { success: false, error: e.message };\n        }\n        return { success: false, error: 'An unknown error occurred while saving the incident report.' };\n    }\n}\n\nexport async function getIncidents() {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'incidents'));\n    const incidents: Incident[] = querySnapshot.docs.map(doc => {\n      const data = doc.data();\n      const timestamp = data.timestamp as Timestamp;\n      \n      return {\n        id: doc.id,\n        location: {\n          latitude: data.location.latitude,\n          longitude: data.location.longitude,\n        },\n        category: data.category,\n        severity: data.severity,\n        summary: data.summary,\n        timestamp: timestamp.toDate().toISOString(),\n      };\n    });\n    return { success: true, data: incidents };\n  } catch (e) {\n    console.error(\"Error getting documents: \", e);\n    if (e instanceof Error) {\n      if (e.message.includes('PERMISSION_DENIED')) {\n        return { success: false, error: 'Permission Denied. Could not retrieve incidents. Please check your Firestore security rules.' };\n      }\n      return { success: false, error: e.message };\n    }\n    return { success: false, error: 'An unknown error occurred while fetching incidents.' };\n  }\n}\n"],"names":[],"mappings":";;;;;;IAuCsB,eAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 352, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/predictive-analysis-flow.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview A flow to analyze nearby incidents and predict consequences.\n *\n * - predictiveAnalysis - A function that handles the predictive analysis process.\n * - PredictiveAnalysisInput - The input type for the predictiveAnalysis function.\n * - PredictiveAnalysisOutput - The return type for the predictiveAnalysis function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\n\nconst IncidentSchema = z.object({\n  id: z.string(),\n  location: z.object({\n    latitude: z.number(),\n    longitude: z.number(),\n  }),\n  category: z.string(),\n  severity: z.string(),\n  summary: z.string(),\n  timestamp: z.string(),\n});\n\nconst PredictiveAnalysisInputSchema = z.object({\n  userLocation: z.object({\n    latitude: z.number(),\n    longitude: z.number(),\n  }),\n  incidents: z.array(IncidentSchema).describe('A list of incidents near the user.'),\n});\nexport type PredictiveAnalysisInput = z.infer<typeof PredictiveAnalysisInputSchema>;\n\nconst PredictiveAnalysisOutputSchema = z.object({\n  analysis: z.string().describe('A detailed analysis of potential issues, including route blockages, traffic jams, and safety advice.'),\n});\nexport type PredictiveAnalysisOutput = z.infer<typeof PredictiveAnalysisOutputSchema>;\n\nexport async function predictiveAnalysis(input: PredictiveAnalysisInput): Promise<PredictiveAnalysisOutput> {\n  return predictiveAnalysisFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'predictiveAnalysisPrompt',\n  input: { schema: PredictiveAnalysisInputSchema },\n  output: { schema: PredictiveAnalysisOutputSchema },\n  prompt: `You are an expert traffic and public safety analyst. Your job is to predict the consequences of various incidents in a user's vicinity.\n\n  **User's Current Location:**\n  Latitude: {{{userLocation.latitude}}}, Longitude: {{{userLocation.longitude}}}\n\n  **Nearby Incidents:**\n  {{#each incidents}}\n  - **Category:** {{category}}\n    - **Severity:** {{severity}}\n    - **Location:** Lat: {{location.latitude}}, Lng: {{location.longitude}}\n    - **Summary:** {{summary}}\n  {{/each}}\n  \n  **Analysis Task:**\n\n  Based on the user's location and the list of nearby incidents, provide a predictive analysis. Your analysis should be concise, actionable, and address the following:\n\n  1.  **Immediate Consequences:** What are the direct impacts of these incidents? (e.g., \"The accident on Main St. is causing a major roadblock.\")\n  2.  **Secondary Effects (Predictions):** What are the likely knock-on effects? Predict potential traffic jams on alternative routes, suggest areas to avoid, and identify any other hazards. (e.g., \"Traffic from the Main St. accident is likely to spill over to Oak Ave, expect heavy congestion there for the next hour. Due to the water logging on 1st Ave, the nearby subway entrance might also be flooded.\")\n  3.  **Safety Advice:** Provide clear, simple safety advice. (e.g., \"Avoid the downtown area if possible. If you must travel, allow for an extra 30 minutes and consider using public transport.\")\n\n  Format your output as a single, coherent report. Use paragraphs and bullet points for clarity.`,\n});\n\nconst predictiveAnalysisFlow = ai.defineFlow(\n  {\n    name: 'predictiveAnalysisFlow',\n    inputSchema: PredictiveAnalysisInputSchema,\n    outputSchema: PredictiveAnalysisOutputSchema,\n  },\n  async (input) => {\n    const { output } = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;;IAuCsB,qBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 365, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,kKAAA,CAAA,OAAoB;AAEnC,MAAM,gBAAgB,kKAAA,CAAA,UAAuB;AAE7C,MAAM,eAAe,kKAAA,CAAA,SAAsB;AAE3C,MAAM,cAAc,kKAAA,CAAA,QAAqB;AAEzC,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,UAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,0JACA;QAED,GAAG,KAAK;;;;;;AAGb,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;;0BACC,8OAAC;;;;;0BACD,8OAAC,kKAAA,CAAA,UAAuB;gBACtB,KAAK;gBACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,8OAAC,kKAAA,CAAA,QAAqB;wBAAC,WAAU;;0CAC/B,8OAAC,4LAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;0CACb,8OAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qDACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,kKAAA,CAAA,QAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,cAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,kKAAA,CAAA,cAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 497, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/analyze-single-incident-impact-flow.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview A flow to analyze the potential impact of a single incident.\n *\n * - analyzeSingleIncidentImpact - A function that handles the single incident analysis process.\n * - AnalyzeSingleIncidentImpactInput - The input type for the analyzeSingleIncidentImpact function.\n * - AnalyzeSingleIncidentImpactOutput - The return type for the analyzeSingleIncidentImpact function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { Incident } from '@/lib/types';\n\nconst IncidentSchema = z.object({\n  id: z.string(),\n  location: z.object({\n    latitude: z.number(),\n    longitude: z.number(),\n  }),\n  category: z.string(),\n  severity: z.string(),\n  summary: z.string(),\n  timestamp: z.string(),\n});\n\nconst AnalyzeSingleIncidentImpactInputSchema = z.object({\n  userLocation: z.object({\n    latitude: z.number(),\n    longitude: z.number(),\n  }).describe(\"The user's current location.\"),\n  incident: IncidentSchema.describe('The specific incident to analyze.'),\n});\nexport type AnalyzeSingleIncidentImpactInput = z.infer<typeof AnalyzeSingleIncidentImpactInputSchema>;\n\nconst AnalyzeSingleIncidentImpactOutputSchema = z.object({\n  impactAnalysis: z.string().describe('A detailed analysis of the incident\\'s potential impact on nearby roads, traffic, and safety.'),\n});\nexport type AnalyzeSingleIncidentImpactOutput = z.infer<typeof AnalyzeSingleIncidentImpactOutputSchema>;\n\nexport async function analyzeSingleIncidentImpact(input: AnalyzeSingleIncidentImpactInput): Promise<AnalyzeSingleIncidentImpactOutput> {\n  return analyzeSingleIncidentImpactFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'analyzeSingleIncidentImpactPrompt',\n  input: { schema: AnalyzeSingleIncidentImpactInputSchema },\n  output: { schema: AnalyzeSingleIncidentImpactOutputSchema },\n  prompt: `You are a hyperlocal traffic and safety AI assistant. Your task is to provide a detailed impact analysis for a single, specific incident based on its type, severity, and location relative to the user.\n\n  **User's Current Location:**\n  Latitude: {{{userLocation.latitude}}}, Longitude: {{{userLocation.longitude}}}\n\n  **Incident to Analyze:**\n  - **Category:** {{incident.category}}\n  - **Severity:** {{incident.severity}}\n  - **Location:** Lat: {{incident.location.latitude}}, Lng: {{incident.location.longitude}}\n  - **Summary:** {{incident.summary}}\n  - **Time Reported:** {{incident.timestamp}}\n\n  **Analysis Task:**\n\n  Based *only* on the single incident provided, generate a concise impact analysis. Be specific and actionable. Address the following points:\n\n  1.  **Direct Road Impact:** What is the most likely immediate effect on the road where the incident occurred? (e.g., \"This accident will likely cause a full or partial blockage of the road it's on.\")\n  2.  **Nearby Street Effects:** How will this impact adjacent streets? Predict which nearby roads might see increased congestion as drivers try to find alternative routes.\n  3.  **Type-Specific Hazards:** What specific dangers are associated with this type of incident?\n      *   For 'Water Logging', mention risks of vehicle damage, stalled cars, or impassable roads.\n      *   For 'Accidents', mention the presence of emergency vehicles and debris.\n      *   For 'Electrical Issues', warn about potential traffic light outages at nearby intersections.\n      *   For 'Fallen Tree', mention road blockage and potential for residual debris.\n  4.  **Actionable Advice:** Give a clear, simple recommendation. (e.g., \"Avoid this immediate area. Use parallel routes two blocks to the north or south to bypass the congestion.\")\n\n  Your analysis should be direct and to the point. Do not give generic advice. Base your predictions on the incident's category and severity. A 'High' severity incident implies a much greater impact than a 'Low' one.\n  `,\n});\n\nconst analyzeSingleIncidentImpactFlow = ai.defineFlow(\n  {\n    name: 'analyzeSingleIncidentImpactFlow',\n    inputSchema: AnalyzeSingleIncidentImpactInputSchema,\n    outputSchema: AnalyzeSingleIncidentImpactOutputSchema,\n  },\n  async (input) => {\n    const { output } = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;;IAwCsB,8BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 510, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLSpanElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <span className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n\n    "],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAEzE","debugId":null}},
    {"offset": {"line": 552, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/predictive-alerts/page.tsx"],"sourcesContent":["\n'use client';\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { MapComponent } from '@/components/map';\nimport { getIncidents } from '@/lib/incidents-service';\nimport { Incident } from '@/lib/types';\nimport { useToast } from '@/hooks/use-toast';\nimport { LoaderCircle, MapPin, AlertOctagon, Wand2, LocateFixed, Zap } from 'lucide-react';\nimport { predictiveAnalysis } from '@/ai/flows/predictive-analysis-flow';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { analyzeSingleIncidentImpact } from '@/ai/flows/analyze-single-incident-impact-flow';\nimport { Badge } from '@/components/ui/badge';\nimport { format } from 'date-fns';\n\n// Haversine formula to calculate distance between two lat/lng points\nconst getDistance = (lat1: number, lon1: number, lat2: number, lon2: number) => {\n  const R = 6371; // Radius of the earth in km\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a =\n    0.5 - Math.cos(dLat) / 2 +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n    (1 - Math.cos(dLon)) / 2;\n  return R * 2 * Math.asin(Math.sqrt(a));\n};\n\nexport default function PredictiveAlertsPage() {\n  const [location, setLocation] = useState<{ latitude: number; longitude: number } | null>(null);\n  const [allIncidents, setAllIncidents] = useState<Incident[]>([]);\n  const [nearbyIncidents, setNearbyIncidents] = useState<Incident[]>([]);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysisResult, setAnalysisResult] = useState<string | null>(null);\n  const [isLocating, setIsLocating] = useState(true);\n\n  const [selectedIncident, setSelectedIncident] = useState<Incident | null>(null);\n  const [isSingleIncidentAnalyzing, setIsSingleIncidentAnalyzing] = useState(false);\n  const [singleIncidentAnalysis, setSingleIncidentAnalysis] = useState<string | null>(null);\n\n  const { toast } = useToast();\n\n  const RADIUS_KM = 3;\n\n  const getLocation = () => {\n    setIsLocating(true);\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setLocation({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude,\n          });\n          setIsLocating(false);\n        },\n        (error) => {\n          console.error(\"Error getting location:\", error);\n          toast({ variant: 'destructive', title: 'Could not get your location.' });\n          setIsLocating(false);\n        }\n      );\n    } else {\n        setIsLocating(false);\n        toast({ variant: 'destructive', title: 'Geolocation is not supported.' });\n    }\n  }\n\n  useEffect(() => {\n    getLocation();\n    \n    const fetchIncidents = async () => {\n      const result = await getIncidents();\n      if (result.success && result.data) {\n        setAllIncidents(result.data);\n      } else {\n        toast({\n          variant: 'destructive',\n          title: 'Failed to load incidents',\n          description: result.error || 'Could not fetch incidents from the server.',\n        });\n      }\n    };\n    fetchIncidents();\n  }, [toast]);\n\n  useEffect(() => {\n    if (location && allIncidents.length > 0) {\n      const nearby = allIncidents.filter(incident => \n        getDistance(location.latitude, location.longitude, incident.location.latitude, incident.location.longitude) <= RADIUS_KM\n      );\n      setNearbyIncidents(nearby);\n    }\n  }, [location, allIncidents]);\n  \n  const userLocationPin = useMemo(() => {\n    if (!location) return [];\n    return [{\n        id: 'user-location',\n        location: { latitude: location.latitude, longitude: location.longitude },\n        category: 'Home',\n        severity: 'Low',\n        summary: 'Your Location',\n        timestamp: new Date().toISOString()\n    }]\n  }, [location]);\n\n  const handlePredictiveAnalysis = async () => {\n    if (!location || nearbyIncidents.length === 0) {\n      toast({\n        variant: 'destructive',\n        title: 'Not enough data',\n        description: 'Cannot perform analysis without location or nearby incidents.',\n      });\n      return;\n    }\n    setIsAnalyzing(true);\n    setAnalysisResult(null);\n    try {\n      const result = await predictiveAnalysis({\n        userLocation: { latitude: location.latitude, longitude: location.longitude },\n        incidents: nearbyIncidents,\n      });\n      setAnalysisResult(result.analysis);\n    } catch (e) {\n      console.error(e);\n      toast({\n        variant: 'destructive',\n        title: 'Analysis Failed',\n        description: 'Could not generate predictive analysis. Please try again.',\n      });\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n  \n  const handlePinClick = async (incident: Incident) => {\n      if (!location) return;\n      setSelectedIncident(incident);\n      setIsSingleIncidentAnalyzing(true);\n      setSingleIncidentAnalysis(null);\n      try {\n          const result = await analyzeSingleIncidentImpact({\n              userLocation: { latitude: location.latitude, longitude: location.longitude },\n              incident: incident,\n          });\n          setSingleIncidentAnalysis(result.impactAnalysis);\n      } catch (e) {\n          console.error(e);\n          toast({\n              variant: 'destructive',\n              title: 'Analysis Failed',\n              description: 'Could not analyze this specific incident. Please try again.',\n          });\n          setSelectedIncident(null); // Close dialog on error\n      } finally {\n          setIsSingleIncidentAnalyzing(false);\n      }\n  }\n\n  return (\n    <div className=\"bg-background min-h-screen\">\n      <main className=\"container mx-auto px-4 py-8 md:py-16\">\n        <header className=\"text-center mb-8\">\n          <h1 className=\"text-4xl sm:text-5xl font-bold font-headline text-primary\">Predictive Alerts</h1>\n          <p className=\"mt-4 text-lg text-muted-foreground\">\n            Analyze incidents in your area to predict potential issues and plan your route.\n          </p>\n        </header>\n        \n        <Card className=\"mb-8\">\n            <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                    <MapPin className=\"w-5 h-5 text-primary\" />\n                    Your Location\n                </CardTitle>\n                <CardDescription>\n                    Incidents are filtered within a {RADIUS_KM}km radius of this point. Click an incident on the map for a detailed impact analysis.\n                </CardDescription>\n            </CardHeader>\n            <CardContent>\n                {isLocating ? (\n                     <div className='flex items-center gap-2 text-muted-foreground'>\n                        <LoaderCircle className=\"w-5 h-5 animate-spin\" />\n                        <p>Getting your current location...</p>\n                    </div>\n                ) : location ? (\n                    <div className=\"flex items-center justify-between\">\n                        <p className='text-muted-foreground text-sm font-mono'>\n                           Lat: {location.latitude.toFixed(5)}, Lng: {location.longitude.toFixed(5)}\n                       </p>\n                       <Button variant=\"outline\" size=\"sm\" onClick={getLocation}>\n                            <LocateFixed className=\"w-4 h-4 mr-2\" />\n                            Refresh Location\n                       </Button>\n                    </div>\n                ) : (\n                    <p className='text-destructive'>Location could not be determined.</p>\n                )}\n            </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n          <div className=\"space-y-6\">\n            <Card>\n                <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                        <AlertOctagon className=\"w-5 h-5 text-destructive\" />\n                        Nearby Incidents ({nearbyIncidents.length})\n                    </CardTitle>\n                    <CardDescription>\n                       These are the incidents reported within {RADIUS_KM}km of you.\n                    </CardDescription>\n                </CardHeader>\n                <CardContent className=\"max-h-96 overflow-y-auto\">\n                    {nearbyIncidents.length > 0 ? (\n                        <ul className=\"space-y-4\">\n                            {nearbyIncidents.map(incident => (\n                                <li key={incident.id} className=\"p-3 bg-muted rounded-md\">\n                                    <p className=\"font-semibold\">{incident.category} <span className=\"text-xs font-normal text-muted-foreground\">({incident.severity} severity)</span></p>\n                                    <p className=\"text-sm text-muted-foreground\">{incident.summary}</p>\n                                </li>\n                            ))}\n                        </ul>\n                    ) : (\n                        <p className=\"text-muted-foreground text-center py-4\">\n                            No incidents reported in your immediate area.\n                        </p>\n                    )}\n                </CardContent>\n            </Card>\n\n            <Button onClick={handlePredictiveAnalysis} disabled={isAnalyzing || nearbyIncidents.length === 0} className=\"w-full text-lg py-6\">\n              {isAnalyzing ? (\n                <>\n                  <LoaderCircle className=\"mr-2 h-5 w-5 animate-spin\" />\n                  Analyzing Potential Issues...\n                </>\n              ) : (\n                 <>\n                  <Wand2 className=\"mr-2 h-5 w-5\" />\n                  Run Predictive Analysis\n                 </>\n              )}\n            </Button>\n            \n            {analysisResult && (\n                <Card className=\"animate-in fade-in-50\">\n                    <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                            <Wand2 className=\"w-5 h-5 text-primary\" />\n                            AI-Powered Prediction\n                        </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                        <p className=\"whitespace-pre-wrap text-muted-foreground\">{analysisResult}</p>\n                    </CardContent>\n                </Card>\n            )}\n          </div>\n          <div className=\"h-[600px]\">\n             {location && (\n                <MapComponent\n                    incidents={[...nearbyIncidents, ...userLocationPin]}\n                    onPinClick={handlePinClick}\n                    center={{ lat: location.latitude, lng: location.longitude }}\n                    zoom={13}\n                    showTraffic\n                />\n             )}\n          </div>\n        </div>\n\n        <Dialog open={!!selectedIncident} onOpenChange={(isOpen) => !isOpen && setSelectedIncident(null)}>\n            <DialogContent className=\"sm:max-w-2xl\">\n                {selectedIncident && (\n                    <>\n                        <DialogHeader>\n                            <DialogTitle className='font-headline text-2xl flex items-center gap-3'>\n                                <Zap className='w-6 h-6 text-primary' />\n                                Incident Impact Analysis\n                            </DialogTitle>\n                             <DialogDescription>\n                                AI-powered analysis and live traffic for the selected incident.\n                            </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"grid gap-4 py-4\">\n                            <div className='h-64 w-full rounded-lg overflow-hidden border'>\n                                <MapComponent\n                                    incidents={[selectedIncident]}\n                                    onPinClick={()=>{}}\n                                    center={{lat: selectedIncident.location.latitude, lng: selectedIncident.location.longitude}}\n                                    zoom={15}\n                                    showTraffic\n                                />\n                            </div>\n                            <div>\n                                <h4 className='font-semibold mb-2 text-lg'>Incident Details</h4>\n                                <Card className='bg-muted/50'>\n                                    <CardContent className='pt-6'>\n                                        <div className='font-bold text-base'>{selectedIncident.category} (<Badge variant=\"outline\">{selectedIncident.severity} Severity</Badge>)</div>\n                                        <p className='text-sm text-muted-foreground mt-1'>{selectedIncident.summary}</p>\n                                        <p className='text-xs text-muted-foreground mt-2'>{format(new Date(selectedIncident.timestamp), 'PPpp')}</p>\n                                    </CardContent>\n                                </Card>\n                            </div>\n                           \n                           {isSingleIncidentAnalyzing ? (\n                               <div className='flex items-center gap-2 text-muted-foreground justify-center py-8'>\n                                   <LoaderCircle className='w-5 h-5 animate-spin' />\n                                   <p>Analyzing impact...</p>\n                               </div>\n                           ) : singleIncidentAnalysis ? (\n                               <div>\n                                   <h4 className='font-semibold mb-2 text-lg'>Predicted Impact</h4>\n                                   <p className=\"whitespace-pre-wrap text-sm text-foreground bg-muted/50 p-4 rounded-md\">{singleIncidentAnalysis}</p>\n                               </div>\n                           ) : (\n                               <p className='text-destructive text-sm text-center py-8'>Could not load analysis.</p>\n                           )}\n\n                        </div>\n                    </>\n                )}\n            </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\n\n    \n\n    "],"names":[],"mappings":"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","debugId":null}}]
}